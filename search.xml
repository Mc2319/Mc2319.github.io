<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ceshi</title>
      <link href="/2020/08/20/ceshi/"/>
      <url>/2020/08/20/ceshi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL实现数据行转列</title>
      <link href="/2020/08/19/sql-shi-xian-shu-ju-xing-zhuan-lie/"/>
      <url>/2020/08/19/sql-shi-xian-shu-ju-xing-zhuan-lie/</url>
      
        <content type="html"><![CDATA[<p>数据分析中经典sql面试题，在做数据统计的时候会需要用到行转列，案例如下。</p><pre><code class="mysql">--建表语句CREATE TABLE students( Id int NOT NULL PRIMARY KEY AUTO_INCREMENT, UserName VARCHAR(50) NULL, Subject VARCHAR(50) NULL, Source numeric(18, 0) NULL) ;--插入数据INSERT INTO students(UserName,Subject,Source) VALUES (&#39;张三&#39;,&#39;语文&#39;,60);INSERT INTO students(UserName,Subject,Source) VALUES  (&#39;李四&#39;,&#39;数学&#39;,75);INSERT INTO students(UserName,Subject,Source) VALUES  (&#39;王五&#39;,&#39;英语&#39;,80);INSERT INTO students(UserName,Subject,Source) VALUES  (&#39;王五&#39;,&#39;数学&#39;,70);INSERT INTO students(UserName,Subject,Source) VALUES  (&#39;王五&#39;,&#39;语文&#39;,68);INSERT INTO students(UserName,Subject,Source) VALUES  (&#39;李四&#39;,&#39;语文&#39;,80);INSERT INTO students(UserName,Subject,Source) VALUES  (&#39;张三&#39;,&#39;英语&#39;,65);</code></pre><p>表结构与数据如下</p><p><img src="/Users/mc/blog/source/_posts/image-20200819200534591.png" alt="image-20200819200534591"></p><p>需要实现如下查询结果：</p><p><img src="/Users/mc/blog/source/_posts/image-20200819200648860.png" alt="image-20200819200648860"></p><p><strong>实现如下：</strong>使用case when实现静态行专列</p><pre><code class="mysql">--case1SELECT    UserName 姓名,    sum( CASE SUBJECT WHEN &#39;语文&#39; THEN Source ELSE 0 END ) 语文,    sum( CASE SUBJECT WHEN &#39;数学&#39; THEN Source ELSE 0 END ) 数学,    sum( CASE SUBJECT WHEN &#39;英语&#39; THEN Source ELSE 0 END ) 英语 FROM    students GROUP BY    UserName;--case2    SELECT    UserName 姓名,    max( CASE SUBJECT WHEN &#39;语文&#39; THEN Source ELSE 0 END ) 语文,    max( CASE SUBJECT WHEN &#39;数学&#39; THEN Source ELSE 0 END ) 数学,    max( CASE SUBJECT WHEN &#39;英语&#39; THEN Source ELSE 0 END ) 英语 FROM    students GROUP BY    UserName;</code></pre><p><strong>注意：</strong>sum、max均为实现聚合作用，以UserName分组聚合。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库存储过程</title>
      <link href="/2020/08/19/shu-ju-ku-cun-chu-guo-cheng/"/>
      <url>/2020/08/19/shu-ju-ku-cun-chu-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>引用《SQL必知必会》中的定义，存储过程就是为以后使用而保存的一条或多条 SQL 语句。</p><p>可将其视为批文件，虽然它们的作用不仅限于批处理。</p><p><strong>注意：</strong></p><p>微软的Access和SQLite不支持存储过程，MySQL 5.0之前的版本不支持存储过程；</p><p>相对于oracle数据库来说，MySQL存储过程相对功能较弱，使用较少。</p><h1 id="使用存储过程优缺点"><a href="#使用存储过程优缺点" class="headerlink" title="使用存储过程优缺点"></a>使用存储过程优缺点</h1><p><strong>优：</strong>存储过程相比较简单的SQL语句，有三个主要的好处，简单、安全、高性能；</p><ul><li><p>通过把处理封装在一个易用的单元中，可以简化复杂的操作</p></li><li><p>不要求反复建立一系列处理步骤，因而保证了数据的一致性</p></li><li><p>因为存储过程通常以编译过的形式存储，所以 DBMS 处理命令所需的 工作量少，提高了性能</p></li><li><p>存在一些只能用在单个请求中的 SQL 元素和特性，存储过程可以使用 它们来编写功能更强更灵活的代码</p></li></ul><p><strong>缺：</strong>存储过程也存在缺陷，比如移植性差，SQL语句更加复杂等。</p><ul><li><p>不同 DBMS 中的存储过程语法有所不同。所以编写真正的可移植存储过程几乎是不可能的。不过，存储过程的自我调用(名字以及数据如何传递)可以相对保持可移植。因此，如果需要移植到别的 DBMS， 至少客户端应用代码不需要变动。</p></li><li><p>一般来说，编写存储过程比编写基本 SQL 语句复杂，需要更高的技能， 更丰富的经验。因此，许多数据库管理员把限制存储过程的创建作为安全措施(主要受上一条缺陷的影响)。</p></li></ul><h1 id="创建删除存储过程"><a href="#创建删除存储过程" class="headerlink" title="创建删除存储过程"></a>创建删除存储过程</h1><p>创建存储过程：</p><pre><code class="mysql">CREATE    [DEFINER = &amp;#123; user | CURRENT_USER &amp;#125;]　PROCEDURE sp_name ([proc_parameter[,...]])    [characteristic ...] routine_bodyproc_parameter:    [ IN | OUT | INOUT ] param_name typecharacteristic:    COMMENT &#39;string&#39;  | LANGUAGE SQL  | [NOT] DETERMINISTIC  | &amp;#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &amp;#125;  | SQL SECURITY &amp;#123; DEFINER | INVOKER &amp;#125;routine_body:　　Valid SQL routine statement[begin_label:] BEGIN　　[statement_list]　　　　……END [end_label]</code></pre><p>声明存储过程</p><pre><code class="mysql">CREATE PROCEDURE demo_in_parameter(IN p_in int);</code></pre><p>存储过程的开始和结束</p><pre><code class="mysql">begin .... end</code></pre><p>变量赋值:</p><pre><code class="mysql">SET @p_in=1  </code></pre><p>变量定义:</p><pre><code class="mysql">DECLARE l_int int unsigned default 4000000; </code></pre><p>创建mysql存储过程、存储函数:</p><pre><code class="mysql">create procedure 存储过程名(参数)</code></pre><p>存储过程体:</p><pre><code class="mysql">create function 存储函数名(参数)</code></pre><p>删除存储过程</p><pre><code class="mysql">drop procedure 存储过程名</code></pre><h1 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h1><p>存储过程是先编译后调用。事实上，在实际工作试用中。存储过程的执行远比编写要频繁的多。</p><pre><code class="mysql">call 存储过程名 (执行参数) </code></pre><h1 id="存储过程的参数"><a href="#存储过程的参数" class="headerlink" title="存储过程的参数"></a>存储过程的参数</h1><p>在存储过程的定义中需要添加参数，格式如下</p><pre><code class="mysql">create procedure 存储过程名([[in|out|inout] 参数名 数据类型...]);</code></pre><p><strong>注</strong></p><p><strong>in：</strong>输入参数，表示调用者向存储过程的传入值</p><p><strong>out：</strong>输出参数，表示存储过程向调用者的返回值，可以有多个且只能是变量</p><p><strong>INOUT：（少用）</strong>既表示调用者向过程传入值，又表示过程向调用者传出值（值只能是变量）</p><h1 id="存储过程的变量"><a href="#存储过程的变量" class="headerlink" title="存储过程的变量"></a>存储过程的变量</h1><h4 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h4><p>局部变量的定义需要放在存储过程体的开始</p><pre><code class="mysql">--定义declare 变量名 变量数据类型 ;--实例DECLARE l_date date DEFAULT &#39;1999-12-31&#39;; </code></pre><h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><pre><code class="mysql">set 变量名 = 值 ;</code></pre><h4 id="存储过程中使用用户变量实例"><a href="#存储过程中使用用户变量实例" class="headerlink" title="存储过程中使用用户变量实例"></a>存储过程中使用用户变量实例</h4><pre><code class="mysql">--存储过程定义CREATE PROCEDURE GreetWorld( ) SELECT CONCAT(@greeting,&#39; World&#39;);--变量赋值set @greeting=&#39;Hello&#39;;--调用存储过程CALL GreetWorld( );--输出结果+----------------------------+| CONCAT(@greeting,&#39; World&#39;) |+----------------------------+| Hello World                |+----------------------------+1 row in set (0.01 sec)</code></pre><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>用户变量名一般用**@**开头；</p><p>用户变量过多会导致程序难以理解及管理，需合理使用。</p><h1 id="存储过程中的控制语句"><a href="#存储过程中的控制语句" class="headerlink" title="存储过程中的控制语句"></a>存储过程中的控制语句</h1><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><p>实例：</p><pre><code class="mysql">mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc3()       -&gt; begin      -&gt; declare x1 varchar(5) default &#39;outer&#39;;       -&gt; begin      -&gt; declare x1 varchar(5) default &#39;inner&#39;;        -&gt; select x1;        -&gt; end;         -&gt; select x1;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ;</code></pre><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><h5 id="If-then-else语句"><a href="#If-then-else语句" class="headerlink" title="If-then-else语句"></a>If-then-else语句</h5><pre><code class="mysql">mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc2(IN parameter int)       -&gt; begin      -&gt; declare var int;       -&gt; set var=parameter+1;       -&gt; if var=0 then      -&gt; insert into t values(17);       -&gt; end if;       -&gt; if parameter=0 then      -&gt; update t set s1=s1+1;       -&gt; else      -&gt; update t set s1=s1+2;       -&gt; end if;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ;</code></pre><h5 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h5><pre><code class="mysql">mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc3 (in parameter int)       -&gt; begin      -&gt; declare var int;       -&gt; set var=parameter+1;       -&gt; case var       -&gt; when 0 then        -&gt; insert into t values(17);       -&gt; when 1 then        -&gt; insert into t values(18);       -&gt; else        -&gt; insert into t values(19);       -&gt; end case;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ; case    when var=0 then        insert into t values(30);    when var&gt;0 then    when var&lt;0 then    elseend case</code></pre><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><h5 id="while-····-end-while"><a href="#while-····-end-while" class="headerlink" title="while ···· end while"></a>while ···· end while</h5><p>在执行前进行检查。</p><pre><code class="mysql">--格式while 条件 do        循环体end while;--实例mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc4()       -&gt; begin      -&gt; declare var int;       -&gt; set var=0;       -&gt; while var&lt;6 do       -&gt; insert into t values(var);       -&gt; set var=var+1;       -&gt; end while;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ;</code></pre><h5 id="repeat····-end-repeat"><a href="#repeat····-end-repeat" class="headerlink" title="repeat···· end repeat"></a>repeat···· end repeat</h5><p>在执行操作后进行检查结果。</p><pre><code class="mysql">--格式repeat         --循环体until 循环条件end repeat；--实例mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc5 ()       -&gt; begin        -&gt; declare v int;       -&gt; set v=0;       -&gt; repeat       -&gt; insert into t values(v);       -&gt; set v=v+1;       -&gt; until v&gt;=5       -&gt; end repeat;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ;</code></pre><h5 id="loop-·····endloop"><a href="#loop-·····endloop" class="headerlink" title="loop ·····endloop"></a>loop ·····endloop</h5><p>loop循环不需要初始条件，同时和repeat循环一样不需要结束天剑，leave语句的意义是离开循环。</p><pre><code class="mysql">mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc6 ()       -&gt; begin      -&gt; declare v int;       -&gt; set v=0;       -&gt; LOOP_LABLE:loop       -&gt; insert into t values(v);       -&gt; set v=v+1;       -&gt; if v &gt;=5 then      -&gt; leave LOOP_LABLE;       -&gt; end if;       -&gt; end loop;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ;</code></pre><h5 id="lables标号"><a href="#lables标号" class="headerlink" title="lables标号"></a>lables标号</h5><p>标号可以用在 begin repeat while 或者 loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。</p><h4 id="iterate迭代"><a href="#iterate迭代" class="headerlink" title="iterate迭代"></a>iterate迭代</h4><p>iterate通过引用复合语句的标号，来重新开始复合语句</p><pre><code class="mysql">mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc10 ()       -&gt; begin      -&gt; declare v int;       -&gt; set v=0;       -&gt; LOOP_LABLE:loop       -&gt; if v=3 then        -&gt; set v=v+1;       -&gt; ITERATE LOOP_LABLE;       -&gt; end if;       -&gt; insert into t values(v);       -&gt; set v=v+1;       -&gt; if v&gt;=5 then      -&gt; leave LOOP_LABLE;       -&gt; end if;       -&gt; end loop;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断sql语句是否使用索引查询</title>
      <link href="/2020/08/19/pan-duan-sql-yu-ju-shi-fou-shi-yong-suo-yin-cha-xun/"/>
      <url>/2020/08/19/pan-duan-sql-yu-ju-shi-fou-shi-yong-suo-yin-cha-xun/</url>
      
        <content type="html"><![CDATA[<p>使用执行计划<strong>explain</strong>查看，在select语句之前添加explain，实例如下</p><pre><code>mysql&gt; explain SELECT * from mytable;+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+| id | select_type | table   | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+|  1 | SIMPLE      | mytable | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | NULL  |+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+1 row in set, 1 warning (0.00 sec)mysql&gt; </code></pre><p><strong>查询字段详解：</strong></p><p><strong>table：</strong>显示这一行的数据是关于哪张表的</p><p><strong>type：</strong>这是最重要的列，其结果从最好到最差的连接类型为</p><p><strong>system &gt; const &gt; eq_ref &gt; ref &gt;</strong> fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p><p>一般来说，得保证查询至少达到range级别，最好能达到ref。否则该sql存在性能问题，需要优化。</p><p><strong>possible_keys：</strong>显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句</p><p><strong>key：</strong> 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。这种情况下，可以在SELECT语句中使用USE INDEX（indexname）来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引</p><p><strong>key_len：</strong>使用的索引的长度。在不损失精确性的情况下，长度越短越好</p><p><strong>ref：</strong>显示索引的哪一列被使用了，如果可能的话，是一个常数</p><p><strong>rows：</strong>MYSQL认为必须检查的用来返回请求数据的行数</p><p><strong>Extra：</strong>关于MYSQL如何解析查询的额外信息。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/2020/08/19/mysql-suo-yin/"/>
      <url>/2020/08/19/mysql-suo-yin/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h1><p>索引作为最常见的SQL优化手段，其建立对于数据库性能是很重要的，可以大大提高数据库的检索速度、SQL执行效率。</p><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><pre><code class="mysql">--指定列索引create index 索引名称 on 表名(索引列);--添加索引列alter table 表名 add index 索引名(列名)；创建表的时候指定索引列create table 表名(  a  int not null,  ...,  index (列名));</code></pre><p><strong>注意：</strong>如果遇到字段太长，无法添加索引且不能减少字段长度的时候，则可以指定索引长度；</p><pre><code class="mysql">create index 索引名称 on 表名(索引列(size));</code></pre><p><strong>size</strong>为索引长度。</p><h4 id="创建唯一索引"><a href="#创建唯一索引" class="headerlink" title="创建唯一索引"></a>创建唯一索引</h4><p>与前面的普通索引类似，但索引列的值必须唯一，可以为null。如果是组合索引，则列值的组合必须唯一。</p><pre><code class="mysql">--指定索引列create unique index 索引名 on 表名(索引列(size));--添加索引列alter table 表名 add unique 索引名(索引列(size));--创建表的时候指定索引列create table 表名(  a  int not null,  ...,  unique (列名));</code></pre><h4 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h4><p>显示表中索引相关信息，可以通过添加\G来格式化输出信息。</p><pre><code class="mysql">show index from 表名;\G</code></pre><h4 id="查看SQL语句是否使用索引"><a href="#查看SQL语句是否使用索引" class="headerlink" title="查看SQL语句是否使用索引"></a>查看SQL语句是否使用索引</h4><p>使用<strong>explain</strong>，详见博文<a href="https://mc2319.github.io/2020/08/19/pan-duan-sql-yu-ju-shi-fou-shi-yong-suo-yin-cha-xun/">判断sql语句是否使用索引查询</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL之case when函数</title>
      <link href="/2020/08/19/sql-zhi-case-when-han-shu/"/>
      <url>/2020/08/19/sql-zhi-case-when-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="case函数使用"><a href="#case函数使用" class="headerlink" title="case函数使用"></a>case函数使用</h1><p><strong>case</strong>具有简单case函数和case搜索函数两种格式。</p><p>实例：</p><pre><code class="mysql">--创建表CREATE TABLE users (id INT, NAME varchar(16), sex int);--插入数据insert into users(id,name) values(1,&#39;张一&#39;);insert into users(id,name,sex) values(2,&#39;张二&#39;,1); insert into users(id,name) values(3,&#39;张三&#39;);insert into users(id,name) values(4,&#39;张四&#39;);insert into users(id,name,sex) values(5,&#39;张五&#39;,2);insert into users(id,name,sex) values(6,&#39;张六&#39;,1);insert into users(id,name,sex) values(7,&#39;张七&#39;,2);insert into users(id,name,sex) values(8,&#39;张八&#39;,1);--表数据select * from users--简单case函数SELECT    u.id,    u.NAME,    u.sex,    (CASE u.sex WHEN 1 THEN &#39;男&#39; WHEN 2 THEN &#39;女&#39; ELSE &#39;空的&#39; END)性别 FROM    users u;--case搜索函数SELECT    u.id,    u.NAME,    u.sex,    (CASE WHEN u.sex = &#39;1&#39; THEN &#39;男&#39; WHEN u.sex = &#39;2&#39; THEN &#39;女&#39; ELSE &#39;空的&#39; END)性别 FROM    users u;</code></pre><p>表结构及数据为</p><p>![表结构和数据](SQL之case when函数/表结构和数据.PNG)</p><p>执行结果为</p><p>![执行结果](SQL之case when函数/执行结果图片.PNG)</p><p>根据实例来看，两种方式可以实现相同的功能。简单case函数的写法相对比较简洁，但是和case搜索函数相比，功能方面会有些限制。</p><h1 id="case与sum（max）结合"><a href="#case与sum（max）结合" class="headerlink" title="case与sum（max）结合"></a>case与sum（max）结合</h1><p>case与sum结合使用，可以实现分段统计，实例如下：</p><pre><code class="mysql">SELECT    sum( CASE u.sex WHEN 1 THEN 1 ELSE 0 END )男性,    sum( CASE u.sex WHEN 2 THEN 1 ELSE 0 END )女性,    sum( CASE WHEN u.sex &lt;&gt; 1 AND u.sex &lt;&gt; 2 THEN 1 ELSE 0 END )性别为空 FROM    users u;</code></pre><p>输出结果为：</p><p>![输出结果](SQL之case when函数/输出结果图片.png)</p><p><strong>注：</strong>使用该函数还可实现行转列的查询，详情见博文<a href="https://mc2319.github.io/2020/08/19/sql-shi-xian-shu-ju-xing-zhuan-lie/">SQL实现数据行转列</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析师面试</title>
      <link href="/2020/08/17/shu-ju-fen-xi-shi-mian-shi/"/>
      <url>/2020/08/17/shu-ju-fen-xi-shi-mian-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析理论"><a href="#数据分析理论" class="headerlink" title="数据分析理论"></a>数据分析理论</h2><p>书籍推荐<strong>《数据分析：企业的贤内助》</strong>，书中通过故事场景搭建，来讲述数据分析的一些基本概念及对企业的帮助，相比枯燥的理论书籍，对入门者更友好一些。</p><h4 id="1、数据分析的目的或者作用"><a href="#1、数据分析的目的或者作用" class="headerlink" title="1、数据分析的目的或者作用"></a>1、数据分析的目的或者作用</h4><p>套用哆啦A梦的4个宝贝：</p><p>行为预见镜——帮助企业识别机会、规避风险；</p><p>问题药丸——帮助企业诊断问题、亡羊补牢；</p><p>跟踪摄像机——帮助企业评估效果、改进营销；</p><p>引力动力器——帮助企业提高效率、加强管理；</p><p>在回答该问题时，结合自己简历中的项目或者之前工作经验，选择与之拟合的点，展开描述，引导面试官向你熟悉的方向提问。</p><h4 id="2、数据分析的基本流程"><a href="#2、数据分析的基本流程" class="headerlink" title="2、数据分析的基本流程"></a>2、数据分析的基本流程</h4><p>设计方案——数据采集——数据处理（录入、清洗、加工等）——数据分析；</p><p>该流程在<strong>《数据分析：企业的贤内助》</strong>书中有更为详细的描述，可参考书中内容，面试时自行展开。</p><h4 id="3、简单介绍下之前自己使用的数据处理工具"><a href="#3、简单介绍下之前自己使用的数据处理工具" class="headerlink" title="3、简单介绍下之前自己使用的数据处理工具"></a>3、简单介绍下之前自己使用的数据处理工具</h4><p>使用过的工具有ETL工具（kettle）、数据库、Excel、python；</p><h4 id="4、数据缺失的时候，你该怎么处理"><a href="#4、数据缺失的时候，你该怎么处理" class="headerlink" title="4、数据缺失的时候，你该怎么处理"></a>4、数据缺失的时候，你该怎么处理</h4><p>删除还有缺失值的个别分析对象（简单删除法、权重法）；</p><p>缺失值补录（平均值补录、特殊值补录、人工填写、多重填补、回归方程填补、K最近距离邻法、就近补齐），由于在之前工作中经常使用平均值及K最近距离邻法补录数据，在回答时对这两个方案进行了展开描述，各位在面试时可以根据实际情况进行调节；</p><p>不处理。</p><h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><p>对sql语句及性能优化考察较多，本人初学入门使用书籍<strong>《sql必知必会》</strong>，可结合<a href="https://www.runoob.com/sql/sql-tutorial.html">菜鸟教程SQL语句使用</a>基本可以满足大部分工作场景的使用。</p><h4 id="1、如何实现行转列（由于是电话面试，只描述了大概方法）"><a href="#1、如何实现行转列（由于是电话面试，只描述了大概方法）" class="headerlink" title="1、如何实现行转列（由于是电话面试，只描述了大概方法）"></a>1、如何实现行转列（由于是电话面试，只描述了大概方法）</h4><p>使用<strong>case when then</strong>的方法。详情见博文<a href="https://mc2319.github.io/2020/08/19/sql-zhi-case-when-han-shu/">case when函数</a></p><h4 id="2、sql优化方式有哪些"><a href="#2、sql优化方式有哪些" class="headerlink" title="2、sql优化方式有哪些"></a>2、sql优化方式有哪些</h4><p>（1）建立索引，详见博文<a href="https://mc2319.github.io/2020/08/19/mysql-suo-yin/">MySQL索引</a>；</p><p><strong>注意：</strong>避免在建立索引的数据列上进行下列操作：</p><p>◆避免对索引字段进行计算操作</p><p>◆避免在索引字段上使用not，&lt;&gt;，!=</p><p>◆避免在索引列上使用IS NULL和IS NOT NULL</p><p>◆避免在索引列上出现数据类型转换</p><p>◆避免在索引字段上使用函数</p><p>◆避免建立索引的列中使用空值</p><p>◆避免在复杂查询中使用like，**%**会导致相关列的索引无法使用，可以通过临时表做关联或采用其他解决办法实现相同效果。</p><p>（2）避免在<strong>where</strong>子句中使用in、not in、or或者having，可以使用exist 和not exist代替 in和not in；</p><pre><code class="mysql">--优化前select 列名 from table1_name where id1 not in (select id2 from table2_name);--优化后select 列名 from table1_name where id1 not exist (select id2 from table2_name);</code></pre><p>不用使用字符格式声明数字(日期)的字符值，要使用数字格式声明，否则会使索引无效，产生全表扫描。</p><pre><code class="mysql">--优化前select 列名from table_namewhere score = ‘100’;优化后select 列名from table_namewhere score = 100;</code></pre><p>（3）如表中数据量较大，分页查询使用到limit时，可以通过优化sql语句，减少回表操作。将查询条件放到子查询中，子查询只查询主键id，然后通过子查询查询到的确定的主键id关联查询其他的属性字段。</p><pre><code class="mysql">--正常查询select 字段from table_namewhere 条件limit ..;--优化后sqlselect 字段from table_name 表1right join(  select 主键id  from table_name  where 条件  limit..;) 表2 on 表2主键id = 表1主键id;</code></pre><h4 id="3、怎么判断一个sql语句是否使用了索引"><a href="#3、怎么判断一个sql语句是否使用了索引" class="headerlink" title="3、怎么判断一个sql语句是否使用了索引"></a>3、怎么判断一个sql语句是否使用了索引</h4><p>在查询语句前加<strong>explain</strong>，详情见博文<a href="https://mc2319.github.io/2020/08/19/pan-duan-sql-yu-ju-shi-fou-shi-yong-suo-yin-cha-xun/">判断sql语句是否使用索引查询</a></p><h4 id="4、是否使用过存储过程，怎么定义"><a href="#4、是否使用过存储过程，怎么定义" class="headerlink" title="4、是否使用过存储过程，怎么定义"></a>4、是否使用过存储过程，怎么定义</h4><p>见博文<a href="https://mc2319.github.io/2020/08/19/shu-ju-ku-cun-chu-guo-cheng/">数据库存储过程</a></p><h2 id="数据分析可视化工具"><a href="#数据分析可视化工具" class="headerlink" title="数据分析可视化工具"></a>数据分析可视化工具</h2><p>Power BI、tableau等工具的一些使用经历，主要是简历项目中的一些细节问题。</p><h4 id="1、在项目过程中，数据源是什么形式，数据是怎么来的。"><a href="#1、在项目过程中，数据源是什么形式，数据是怎么来的。" class="headerlink" title="1、在项目过程中，数据源是什么形式，数据是怎么来的。"></a>1、在项目过程中，数据源是什么形式，数据是怎么来的。</h4><p>根据实际情况回答。</p><h4 id="2、Power-BI加载项有哪些，分别有什么作用"><a href="#2、Power-BI加载项有哪些，分别有什么作用" class="headerlink" title="2、Power BI加载项有哪些，分别有什么作用"></a>2、Power BI加载项有哪些，分别有什么作用</h4><ul><li>Power Query: 可以帮助查询，编辑和装载外部数据。</li><li>Power Pivot: 主要用于数据模型和数据分析。</li><li>Power View: 用于可视化设计和交互报告。</li><li>Power Map: 有助于显示3D地图视角。</li></ul><h2 id="统计学、数学基本理论"><a href="#统计学、数学基本理论" class="headerlink" title="统计学、数学基本理论"></a>统计学、数学基本理论</h2><p>答得较差，题目都忘了</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据分析中的包</title>
      <link href="/2020/08/17/python-shu-ju-fen-xi-zhong-de-bao/"/>
      <url>/2020/08/17/python-shu-ju-fen-xi-zhong-de-bao/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL执行顺序</title>
      <link href="/2020/08/17/sql-zhi-xing-shun-xu/"/>
      <url>/2020/08/17/sql-zhi-xing-shun-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h2><p>数据库作为作为数据分析的重要辅助工具之一，主要承担数据保存及数据准确、方便提取的功效，想要做到数据提取的准确性，关键在于业务需求理解能力、执行原理掌握的程度。此时，<strong>SQL子句的执行顺序</strong>就很重要了。</p><pre><code class="mysql">select a,count(*) from test group by a having count(*) &gt; 2; </code></pre><p><strong>思考：</strong>以上sql语句的执行顺序是什么<strong>？</strong></p><p>1、确定需要检索的数据库，执行<strong>from</strong></p><p>2、执行<strong>group by</strong>，对数据通过a列进行分组</p><p>3、执行<strong>having</strong>，过滤分组</p><p>4、执行<strong>select</strong>，返回查询结果</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>想要理解SQL子句执行顺序，其实也很简单，例如where、group by等均是为检索数据服务，所以需要在select之前执行；而order by、limit等均是为检索后数据进行操作（排序、限制行数等）；引用网上一张图展示执行过程如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9scE9CckxpYkxwdDV5VWliOVB6UVl2c0VsMjFIcGlhZ2R4U2pIM1BOSXFOU25Dd3pmWWxpYlJEcXRacnoyTWliNVhUT2h6MEdTd0V0cjhYcGpFaWE1YWhIV1kxZy82NDA?x-oss-process=image/format,png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL执行原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下忘记mysql的root密码解决方法</title>
      <link href="/2020/08/15/mac-xia-wang-ji-mysql-de-root-mi-ma-jie-jue-fang-fa/"/>
      <url>/2020/08/15/mac-xia-wang-ji-mysql-de-root-mi-ma-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="禁用验证登录数据库"><a href="#禁用验证登录数据库" class="headerlink" title="禁用验证登录数据库"></a>禁用验证登录数据库</h2><p>1关闭mysql服务，进入系统偏好设置-MySQL，点击Stop MySQL Server。</p><img src="/Users/mc/Library/Application Support/typora-user-images/image-20200817111853754.png" alt="image-20200817111853754" style="zoom:50%;"><img src="/Users/mc/Library/Application Support/typora-user-images/image-20200817111922604.png" alt="image-20200817111922604" style="zoom:50%;"><p>2、启动终端（terminal）</p><p>输入：</p><pre><code class="shell">sudo su //进入管理员模式cd /usr/local/mysql/bin/ //进入mysql目录 ./mysqld_safe --skip-grant-tables &amp; //禁用mysql的验证功能</code></pre><p>3、通过mysql workbench进入数据库，此时已经不需要密码验证。</p><h4 id="通过此方法在忘记密码的情况下进入了数据库，但还是未能修改密码，难以保证以后是否会出问题。本人最后采用了重装mysql服务的方式彻底解决了问题，建议做好密码备份。"><a href="#通过此方法在忘记密码的情况下进入了数据库，但还是未能修改密码，难以保证以后是否会出问题。本人最后采用了重装mysql服务的方式彻底解决了问题，建议做好密码备份。" class="headerlink" title="通过此方法在忘记密码的情况下进入了数据库，但还是未能修改密码，难以保证以后是否会出问题。本人最后采用了重装mysql服务的方式彻底解决了问题，建议做好密码备份。"></a>通过此方法在忘记密码的情况下进入了数据库，但还是未能修改密码，难以保证以后是否会出问题。本人最后采用了<em>重装mysql服务</em>的方式彻底解决了问题，<em>建议做好密码备份</em>。</h4>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的数组</title>
      <link href="/2020/08/09/javascript-zhong-de-shu-zu/"/>
      <url>/2020/08/09/javascript-zhong-de-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组是一种特殊的变量，可以在单个变量中存储多个值，并且可以通过索引快速访问这些值</p><h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><pre><code class="javascript">var arrayName = [a1,a2...]; //数组定义语法var animals = [&quot;lion&quot;,&quot;tiger&quot;]; //数组定义实例</code></pre><p>上面数组定义实例中，定义名为animals的数组，并为其赋值。</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>数组定义时，多个元素之间用逗号“,”隔开；</p><p>最后一个元素后请不要使用“,”；</p><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p>通过引用索引号来引用数组的某个元素值</p><pre><code class="javascript">var name = animals[0] ; //访问数组的第一个元素document.getElementByld(&quot;demo&quot;).innerHTML = animals ; //引用数组名访问整个数组</code></pre><p>该实例可以给“name”变量赋值，值为数组animals的第一个元素。</p><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><p>数组元素是从0开始索引，[0]为数组的第一个元素。</p><h2 id="修改数组元素"><a href="#修改数组元素" class="headerlink" title="修改数组元素"></a>修改数组元素</h2><pre><code class="javascript">animals[0] = &quot;elephants&quot; ;//修改数组animals中首个元素</code></pre><h2 id="数组与对象"><a href="#数组与对象" class="headerlink" title="数组与对象"></a>数组与对象</h2><p>数组是一种特殊类型的对象。在数组中使用数字来访问其元素，对象中使用名称来访问其“成员”。</p><pre><code class="javascript">//数组var animals = [&quot;lion&quot;,&quot;tiger&quot;];var name = animals[0]; //返回数组元素“lion”//对象var archives = &amp;#123;Name:&quot;John&quot;, career:&quot;worker&quot;, age:46&amp;#125;;archives.Name; //返回对象成员Name的值“John”</code></pre><h5 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h5><p>数组元素可以是对象、函数，甚至数组。</p><p>在 JavaScript 中，<strong>数组</strong>使用<strong>数字索引</strong>。</p><p>在 JavaScript 中，<strong>对象</strong>使用<strong>命名索引</strong>。</p><p><strong>数组是特殊类型的对象，具有数字索引。</strong></p><h2 id="数组属性与方法"><a href="#数组属性与方法" class="headerlink" title="数组属性与方法"></a>数组属性与方法</h2><h4 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h4><p>length属性返回数组的长度（元素个数）。</p><pre><code class="javascript">var animals = [&quot;lion&quot;,&quot;tiger&quot;];animals.length; //返回数组长度2</code></pre><h4 id="访问数组最后一个元素"><a href="#访问数组最后一个元素" class="headerlink" title="访问数组最后一个元素"></a>访问数组最后一个元素</h4><p>数组元素值得访问通过引用其索引达成，所以访问最后一个元素可以通过数组length属性完成。</p><pre><code class="javascript">var last = animals[animals.length-1]; //返回数组最后一个元素“tiger”</code></pre><h4 id="遍历数组元素"><a href="#遍历数组元素" class="headerlink" title="遍历数组元素"></a>遍历数组元素</h4><p>遍历数组元素通过for循环，结合数组length属性达成。</p><pre><code class="javascript">var animals, text, fLen, i;var animals = [&quot;lion&quot;,&quot;tiger&quot;];fLen = fruits.length; //数组长度text = &quot;&lt;ul&gt;&quot;;for (i = 0; i &lt; fLen; i++) &amp;#123;     text += &quot;&lt;li&gt;&quot; + fruits[i] + &quot;&lt;/li&gt;&quot;;&amp;#125; </code></pre><p><strong>注</strong>：也可以使用Array.foreach()函数，但是最安全的方法是使用for循环。</p><pre><code class="javascript">var animals, text;var animals = [&quot;lion&quot;,&quot;tiger&quot;];text = &quot;&lt;ul&gt;&quot;;animals.forEach(myFunction);text += &quot;&lt;/ul&gt;&quot;;function myFunction(value) &amp;#123;  text += &quot;&lt;li&gt;&quot; + value + &quot;&lt;/li&gt;&quot;;&amp;#125;</code></pre><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>使用push方法：</p><pre><code class="javascript">var animals = [&quot;lion&quot;,&quot;tiger&quot;];animals.push(&quot;elephants&quot;); //为数组添加新元素“elephants”</code></pre><p><strong>注：</strong>可以使用length属性添加新元素：</p><pre><code class="javascript">animals[animals.length] = &quot;elephants&quot; ;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文对</title>
      <link href="/2020/08/06/hui-wen-dui/"/>
      <url>/2020/08/06/hui-wen-dui/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一组 <strong>互不相同</strong> 的单词， 找出所有<strong>不同</strong> 的索引对<code>(i, j)</code>，使得列表中的两个单词， <code>words[i] + words[j]</code> ，可拼接成回文串。</p><p><strong>示例 1：</strong></p><pre><code>输入：[&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]输出：[[0,1],[1,0],[3,2],[2,4]] 解释：可拼接成的回文串为 [&quot;dcbaabcd&quot;,&quot;abcddcba&quot;,&quot;slls&quot;,&quot;llssssll&quot;]</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：[&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]输出：[[0,1],[1,0]] 解释：可拼接成的回文串为 [&quot;battab&quot;,&quot;tabbat&quot;]</code></pre><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="暴力验证法（python字典）："><a href="#暴力验证法（python字典）：" class="headerlink" title="暴力验证法（python字典）："></a>暴力验证法（python字典）：</h2><p>在字典数存储所有的字符串，再将待查询的字符串逆序在字典树中进行遍历，判断其是否存在。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js中变量的作用域</title>
      <link href="/2020/08/06/js-zhong-bian-liang-de-zuo-yong-yu/"/>
      <url>/2020/08/06/js-zhong-bian-liang-de-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Js变量作用域"><a href="#1-Js变量作用域" class="headerlink" title="1:Js变量作用域"></a>1:Js变量作用域</h1><p>求以下代码的输出结果</p><pre><code class="javascript">var num1 = 50;var num2 = 60;function f1(num,num1) &amp;#123;    num = 100;    num1 = 100;    num2 = 100;//    console.log(num1);    console.log(num2);    console.log(num);&amp;#125;f1(num1,num2);console.log(num1);console.log(num2);console.log(num);</code></pre><h2 id="1-1在函数f1当中"><a href="#1-1在函数f1当中" class="headerlink" title="1.1在函数f1当中"></a>1.1在函数f1当中</h2><p>定义形式参数num、num1</p><p>传参num1，num2</p><pre><code class="javascript">var num = 50;var num1 = 60;</code></pre><p>f1函数中未定义num2，所以num2为全局变量num2</p><pre><code class="javascript">var num2 = 60;num2 = 100;</code></pre><p>输出结果为：</p><pre><code>100100100</code></pre><h2 id="1-2函数外输出"><a href="#1-2函数外输出" class="headerlink" title="1.2函数外输出"></a>1.2函数外输出</h2><p>在函数外，num1为全局变量，在函数f1中未做更改，输出50，num2为全局变量，但在函数f1中更新为100，故输出100，全局变量未定义num变量，打印输出结果报错。</p><pre><code>50100num is not defined</code></pre><h1 id="2值类型和引用类型的传递"><a href="#2值类型和引用类型的传递" class="headerlink" title="2值类型和引用类型的传递"></a>2值类型和引用类型的传递</h1><p>如下代码输出结果</p><pre><code class="js">function Person(name,age,salary)&amp;#123;    this.name = name ;    this.age = age ;    this.salary = salary ;&amp;#125;function f1(person) &amp;#123;    person.name = &quot;cc&quot;;    person = new Person(&quot;aa&quot;,&quot;19&quot;,&quot;10&quot;);&amp;#125;var p = new Person(&quot;bb&quot;,&quot;20&quot;,&quot;11&quot;);console.log(p.name);f1(p);console.log(p.name);</code></pre><h2 id="2-1第一个输出结果"><a href="#2-1第一个输出结果" class="headerlink" title="2.1第一个输出结果"></a>2.1第一个输出结果</h2><p>定义变量p，给函数Person传参（”bb”,””），输出p.name = bb；</p><pre><code>bb</code></pre><h2 id="2-2第二个输出结果"><a href="#2-2第二个输出结果" class="headerlink" title="2.2第二个输出结果"></a>2.2第二个输出结果</h2><p>函数f1传参为p，执行如下，</p><pre><code class="javascript">var person = p;person.name = &quot;cc&quot;;//this.name = &quot;cc&quot;;person = new Person(&quot;aa&quot;,&quot;19&quot;,&quot;10&quot;)；//person.name = &#39;aa&#39;；//在堆内存中重新开辟空间存放</code></pre><p>输出结果为：</p><pre><code>cc</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
