<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库存储过程</title>
      <link href="/2020/08/19/shu-ju-ku-cun-chu-guo-cheng/"/>
      <url>/2020/08/19/shu-ju-ku-cun-chu-guo-cheng/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断sql语句是否使用索引查询</title>
      <link href="/2020/08/19/pan-duan-sql-yu-ju-shi-fou-shi-yong-suo-yin-cha-xun/"/>
      <url>/2020/08/19/pan-duan-sql-yu-ju-shi-fou-shi-yong-suo-yin-cha-xun/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/2020/08/19/mysql-suo-yin/"/>
      <url>/2020/08/19/mysql-suo-yin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL之case when函数</title>
      <link href="/2020/08/19/sql-zhi-case-when-han-shu/"/>
      <url>/2020/08/19/sql-zhi-case-when-han-shu/</url>
      
        <content type="html"><![CDATA[<p>一般来说</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析师面试</title>
      <link href="/2020/08/17/shu-ju-fen-xi-shi-mian-shi/"/>
      <url>/2020/08/17/shu-ju-fen-xi-shi-mian-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="数据分析理论"><a href="#数据分析理论" class="headerlink" title="数据分析理论"></a>数据分析理论</h1><p>书籍推荐<strong>《数据分析：企业的贤内助》</strong>，书中通过故事场景搭建，来讲述数据分析的一些基本概念及对企业的帮助，相比枯燥的理论书籍，对入门者更友好一些。</p><h4 id="1、数据分析的目的或者作用"><a href="#1、数据分析的目的或者作用" class="headerlink" title="1、数据分析的目的或者作用"></a>1、数据分析的目的或者作用</h4><p>套用哆啦A梦的4个宝贝：</p><p>行为预见镜——帮助企业识别机会、规避风险；</p><p>问题药丸——帮助企业诊断问题、亡羊补牢；</p><p>跟踪摄像机——帮助企业评估效果、改进营销；</p><p>引力动力器——帮助企业提高效率、加强管理；</p><p>在回答该问题时，结合自己简历中的项目或者之前工作经验，选择与之拟合的点，展开描述，引导面试官向你熟悉的方向提问。</p><h4 id="2、数据分析的基本流程"><a href="#2、数据分析的基本流程" class="headerlink" title="2、数据分析的基本流程"></a>2、数据分析的基本流程</h4><p>设计方案——数据采集——数据处理（录入、清洗、加工等）——数据分析；</p><p>该流程在<strong>《数据分析：企业的贤内助》</strong>书中有更为详细的描述，可参考书中内容，面试时自行展开。</p><h4 id="3、简单介绍下之前自己使用的数据处理工具"><a href="#3、简单介绍下之前自己使用的数据处理工具" class="headerlink" title="3、简单介绍下之前自己使用的数据处理工具"></a>3、简单介绍下之前自己使用的数据处理工具</h4><p>使用过的工具有ETL工具（kettle）、数据库、Excel、python；</p><h4 id="4、数据缺失的时候，你该怎么处理"><a href="#4、数据缺失的时候，你该怎么处理" class="headerlink" title="4、数据缺失的时候，你该怎么处理"></a>4、数据缺失的时候，你该怎么处理</h4><p>删除还有缺失值的个别分析对象（简单删除法、权重法）；</p><p>缺失值补录（平均值补录、特殊值补录、人工填写、多重填补、回归方程填补、K最近距离邻法、就近补齐），由于在之前工作中经常使用平均值及K最近距离邻法补录数据，在回答时对这两个方案进行了展开描述，各位在面试时可以根据实际情况进行调节；</p><p>不处理。</p><h1 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h1><p>对sql语句及性能优化考察较多，本人初学入门使用书籍<strong>《sql必知必会》</strong>，可结合<a href="https://www.runoob.com/sql/sql-tutorial.html">菜鸟教程SQL语句使用</a>基本可以满足大部分工作场景的使用。</p><h4 id="1、如何实现行转列（由于是电话面试，只描述了大概方法）"><a href="#1、如何实现行转列（由于是电话面试，只描述了大概方法）" class="headerlink" title="1、如何实现行转列（由于是电话面试，只描述了大概方法）"></a>1、如何实现行转列（由于是电话面试，只描述了大概方法）</h4><p>使用<strong>case when then</strong>的方法。详情见博文<a href="">case when函数</a></p><h4 id="2、sql优化方式有哪些"><a href="#2、sql优化方式有哪些" class="headerlink" title="2、sql优化方式有哪些"></a>2、sql优化方式有哪些</h4><p>（1）建立索引，详见博文<a href="">MySQL索引</a>；</p><p><strong>注意：</strong>避免在建立索引的数据列上进行下列操作：</p><p>◆避免对索引字段进行计算操作</p><p>◆避免在索引字段上使用not，&lt;&gt;，!=</p><p>◆避免在索引列上使用IS NULL和IS NOT NULL</p><p>◆避免在索引列上出现数据类型转换</p><p>◆避免在索引字段上使用函数</p><p>◆避免建立索引的列中使用空值</p><p>◆避免在复杂查询中使用like，**%**会导致相关列的索引无法使用，可以通过临时表做关联或采用其他解决办法实现相同效果。</p><p>（2）避免在<strong>where</strong>子句中使用in、not in、or或者having，可以使用exist 和not exist代替 in和not in；</p><pre><code class="mysql">--优化前select 列名 from table1_name where id1 not in (select id2 from table2_name);--优化后select 列名 from table1_name where id1 not exist (select id2 from table2_name);</code></pre><p>不用使用字符格式声明数字(日期)的字符值，要使用数字格式声明，否则会使索引无效，产生全表扫描。</p><pre><code class="mysql">--优化前select 列名from table_namewhere score = ‘100’;优化后select 列名from table_namewhere score = 100;</code></pre><p>（3）如表中数据量较大，分页查询使用到limit时，可以通过优化sql语句，减少回表操作。将查询条件放到子查询中，子查询只查询主键id，然后通过子查询查询到的确定的主键id关联查询其他的属性字段。</p><pre><code class="mysql">--正常查询select 字段from table_namewhere 条件limit ..;--优化后sqlselect 字段from table_name 表1right join(  select 主键id  from table_name  where 条件  limit..;) 表2 on 表2主键id = 表1主键id;</code></pre><h4 id="3、怎么判断一个sql语句是否使用了索引"><a href="#3、怎么判断一个sql语句是否使用了索引" class="headerlink" title="3、怎么判断一个sql语句是否使用了索引"></a>3、怎么判断一个sql语句是否使用了索引</h4><p>在查询语句前加<strong>explain</strong>，详情见博文<a href="">判断sql语句是否使用索引查询</a></p><h4 id="4、是否使用过存储过程，怎么定义"><a href="#4、是否使用过存储过程，怎么定义" class="headerlink" title="4、是否使用过存储过程，怎么定义"></a>4、是否使用过存储过程，怎么定义</h4><p>见博文<a href="">数据库存储过程</a></p><h1 id="数据分析可视化工具"><a href="#数据分析可视化工具" class="headerlink" title="数据分析可视化工具"></a>数据分析可视化工具</h1><p>Power BI、tableau等工具的一些使用经历。</p><h1 id="统计学、数学基本理论"><a href="#统计学、数学基本理论" class="headerlink" title="统计学、数学基本理论"></a>统计学、数学基本理论</h1><p>答得较差，题目都忘了</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据分析中的包</title>
      <link href="/2020/08/17/python-shu-ju-fen-xi-zhong-de-bao/"/>
      <url>/2020/08/17/python-shu-ju-fen-xi-zhong-de-bao/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL执行顺序</title>
      <link href="/2020/08/17/sql-zhi-xing-shun-xu/"/>
      <url>/2020/08/17/sql-zhi-xing-shun-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h2><p>数据库作为作为数据分析的重要辅助工具之一，主要承担数据保存及数据准确、方便提取的功效，想要做到数据提取的准确性，关键在于业务需求理解能力、执行原理掌握的程度。此时，<strong>SQL子句的执行顺序</strong>就很重要了。</p><pre><code class="mysql">select a,count(*) from test group by a having count(*) &gt; 2; </code></pre><p><strong>思考：</strong>以上sql语句的执行顺序是什么<strong>？</strong></p><p>1、确定需要检索的数据库，执行<strong>from</strong></p><p>2、执行<strong>group by</strong>，对数据通过a列进行分组</p><p>3、执行<strong>having</strong>，过滤分组</p><p>4、执行<strong>select</strong>，返回查询结果</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>想要理解SQL子句执行顺序，其实也很简单，例如where、group by等均是为检索数据服务，所以需要在select之前执行；而order by、limit等均是为检索后数据进行操作（排序、限制行数等）；引用网上一张图展示执行过程如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9scE9CckxpYkxwdDV5VWliOVB6UVl2c0VsMjFIcGlhZ2R4U2pIM1BOSXFOU25Dd3pmWWxpYlJEcXRacnoyTWliNVhUT2h6MEdTd0V0cjhYcGpFaWE1YWhIV1kxZy82NDA?x-oss-process=image/format,png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL执行原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下忘记mysql的root密码解决方法</title>
      <link href="/2020/08/15/mac-xia-wang-ji-mysql-de-root-mi-ma-jie-jue-fang-fa/"/>
      <url>/2020/08/15/mac-xia-wang-ji-mysql-de-root-mi-ma-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="禁用验证登录数据库"><a href="#禁用验证登录数据库" class="headerlink" title="禁用验证登录数据库"></a>禁用验证登录数据库</h2><p>1关闭mysql服务，进入系统偏好设置-MySQL，点击Stop MySQL Server。</p><img src="/Users/mc/Library/Application Support/typora-user-images/image-20200817111853754.png" alt="image-20200817111853754" style="zoom:50%;" /><img src="/Users/mc/Library/Application Support/typora-user-images/image-20200817111922604.png" alt="image-20200817111922604" style="zoom:50%;" /><p>2、启动终端（terminal）</p><p>输入：</p><pre><code class="shell">sudo su //进入管理员模式cd /usr/local/mysql/bin/ //进入mysql目录 ./mysqld_safe --skip-grant-tables &amp; //禁用mysql的验证功能</code></pre><p>3、通过mysql workbench进入数据库，此时已经不需要密码验证。</p><h4 id="通过此方法在忘记密码的情况下进入了数据库，但还是未能修改密码，难以保证以后是否会出问题。本人最后采用了重装mysql服务的方式彻底解决了问题，建议做好密码备份。"><a href="#通过此方法在忘记密码的情况下进入了数据库，但还是未能修改密码，难以保证以后是否会出问题。本人最后采用了重装mysql服务的方式彻底解决了问题，建议做好密码备份。" class="headerlink" title="通过此方法在忘记密码的情况下进入了数据库，但还是未能修改密码，难以保证以后是否会出问题。本人最后采用了重装mysql服务的方式彻底解决了问题，建议做好密码备份。"></a>通过此方法在忘记密码的情况下进入了数据库，但还是未能修改密码，难以保证以后是否会出问题。本人最后采用了<em>重装mysql服务</em>的方式彻底解决了问题，<em>建议做好密码备份</em>。</h4>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的数组</title>
      <link href="/2020/08/09/javascript-zhong-de-shu-zu/"/>
      <url>/2020/08/09/javascript-zhong-de-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组是一种特殊的变量，可以在单个变量中存储多个值，并且可以通过索引快速访问这些值</p><h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><pre><code class="javascript">var arrayName = [a1,a2...]; //数组定义语法var animals = [&quot;lion&quot;,&quot;tiger&quot;]; //数组定义实例</code></pre><p>上面数组定义实例中，定义名为animals的数组，并为其赋值。</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>数组定义时，多个元素之间用逗号“,”隔开；</p><p>最后一个元素后请不要使用“,”；</p><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p>通过引用索引号来引用数组的某个元素值</p><pre><code class="javascript">var name = animals[0] ; //访问数组的第一个元素document.getElementByld(&quot;demo&quot;).innerHTML = animals ; //引用数组名访问整个数组</code></pre><p>该实例可以给“name”变量赋值，值为数组animals的第一个元素。</p><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><p>数组元素是从0开始索引，[0]为数组的第一个元素。</p><h2 id="修改数组元素"><a href="#修改数组元素" class="headerlink" title="修改数组元素"></a>修改数组元素</h2><pre><code class="javascript">animals[0] = &quot;elephants&quot; ;//修改数组animals中首个元素</code></pre><h2 id="数组与对象"><a href="#数组与对象" class="headerlink" title="数组与对象"></a>数组与对象</h2><p>数组是一种特殊类型的对象。在数组中使用数字来访问其元素，对象中使用名称来访问其“成员”。</p><pre><code class="javascript">//数组var animals = [&quot;lion&quot;,&quot;tiger&quot;];var name = animals[0]; //返回数组元素“lion”//对象var archives = &amp;#123;Name:&quot;John&quot;, career:&quot;worker&quot;, age:46&amp;#125;;archives.Name; //返回对象成员Name的值“John”</code></pre><h5 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h5><p>数组元素可以是对象、函数，甚至数组。</p><p>在 JavaScript 中，<strong>数组</strong>使用<strong>数字索引</strong>。</p><p>在 JavaScript 中，<strong>对象</strong>使用<strong>命名索引</strong>。</p><p><strong>数组是特殊类型的对象，具有数字索引。</strong></p><h2 id="数组属性与方法"><a href="#数组属性与方法" class="headerlink" title="数组属性与方法"></a>数组属性与方法</h2><h4 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h4><p>length属性返回数组的长度（元素个数）。</p><pre><code class="javascript">var animals = [&quot;lion&quot;,&quot;tiger&quot;];animals.length; //返回数组长度2</code></pre><h4 id="访问数组最后一个元素"><a href="#访问数组最后一个元素" class="headerlink" title="访问数组最后一个元素"></a>访问数组最后一个元素</h4><p>数组元素值得访问通过引用其索引达成，所以访问最后一个元素可以通过数组length属性完成。</p><pre><code class="javascript">var last = animals[animals.length-1]; //返回数组最后一个元素“tiger”</code></pre><h4 id="遍历数组元素"><a href="#遍历数组元素" class="headerlink" title="遍历数组元素"></a>遍历数组元素</h4><p>遍历数组元素通过for循环，结合数组length属性达成。</p><pre><code class="javascript">var animals, text, fLen, i;var animals = [&quot;lion&quot;,&quot;tiger&quot;];fLen = fruits.length; //数组长度text = &quot;&lt;ul&gt;&quot;;for (i = 0; i &lt; fLen; i++) &amp;#123;     text += &quot;&lt;li&gt;&quot; + fruits[i] + &quot;&lt;/li&gt;&quot;;&amp;#125; </code></pre><p><strong>注</strong>：也可以使用Array.foreach()函数，但是最安全的方法是使用for循环。</p><pre><code class="javascript">var animals, text;var animals = [&quot;lion&quot;,&quot;tiger&quot;];text = &quot;&lt;ul&gt;&quot;;animals.forEach(myFunction);text += &quot;&lt;/ul&gt;&quot;;function myFunction(value) &amp;#123;  text += &quot;&lt;li&gt;&quot; + value + &quot;&lt;/li&gt;&quot;;&amp;#125;</code></pre><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>使用push方法：</p><pre><code class="javascript">var animals = [&quot;lion&quot;,&quot;tiger&quot;];animals.push(&quot;elephants&quot;); //为数组添加新元素“elephants”</code></pre><p><strong>注：</strong>可以使用length属性添加新元素：</p><pre><code class="javascript">animals[animals.length] = &quot;elephants&quot; ;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文对</title>
      <link href="/2020/08/06/hui-wen-dui/"/>
      <url>/2020/08/06/hui-wen-dui/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一组 <strong>互不相同</strong> 的单词， 找出所有<strong>不同</strong> 的索引对<code>(i, j)</code>，使得列表中的两个单词， <code>words[i] + words[j]</code> ，可拼接成回文串。</p><p><strong>示例 1：</strong></p><pre><code>输入：[&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]输出：[[0,1],[1,0],[3,2],[2,4]] 解释：可拼接成的回文串为 [&quot;dcbaabcd&quot;,&quot;abcddcba&quot;,&quot;slls&quot;,&quot;llssssll&quot;]</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：[&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]输出：[[0,1],[1,0]] 解释：可拼接成的回文串为 [&quot;battab&quot;,&quot;tabbat&quot;]</code></pre><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="暴力验证法（python字典）："><a href="#暴力验证法（python字典）：" class="headerlink" title="暴力验证法（python字典）："></a>暴力验证法（python字典）：</h2><p>在字典数存储所有的字符串，再将待查询的字符串逆序在字典树中进行遍历，判断其是否存在。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js中变量的作用域</title>
      <link href="/2020/08/06/js-zhong-bian-liang-de-zuo-yong-yu/"/>
      <url>/2020/08/06/js-zhong-bian-liang-de-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Js变量作用域"><a href="#1-Js变量作用域" class="headerlink" title="1:Js变量作用域"></a>1:Js变量作用域</h1><p>求以下代码的输出结果</p><pre><code class="javascript">var num1 = 50;var num2 = 60;function f1(num,num1) &amp;#123;    num = 100;    num1 = 100;    num2 = 100;//    console.log(num1);    console.log(num2);    console.log(num);&amp;#125;f1(num1,num2);console.log(num1);console.log(num2);console.log(num);</code></pre><h2 id="1-1在函数f1当中"><a href="#1-1在函数f1当中" class="headerlink" title="1.1在函数f1当中"></a>1.1在函数f1当中</h2><p>定义形式参数num、num1</p><p>传参num1，num2</p><pre><code class="javascript">var num = 50;var num1 = 60;</code></pre><p>f1函数中未定义num2，所以num2为全局变量num2</p><pre><code class="javascript">var num2 = 60;num2 = 100;</code></pre><p>输出结果为：</p><pre><code>100100100</code></pre><h2 id="1-2函数外输出"><a href="#1-2函数外输出" class="headerlink" title="1.2函数外输出"></a>1.2函数外输出</h2><p>在函数外，num1为全局变量，在函数f1中未做更改，输出50，num2为全局变量，但在函数f1中更新为100，故输出100，全局变量未定义num变量，打印输出结果报错。</p><pre><code>50100num is not defined</code></pre><h1 id="2值类型和引用类型的传递"><a href="#2值类型和引用类型的传递" class="headerlink" title="2值类型和引用类型的传递"></a>2值类型和引用类型的传递</h1><p>如下代码输出结果</p><pre><code class="js">function Person(name,age,salary)&amp;#123;    this.name = name ;    this.age = age ;    this.salary = salary ;&amp;#125;function f1(person) &amp;#123;    person.name = &quot;cc&quot;;    person = new Person(&quot;aa&quot;,&quot;19&quot;,&quot;10&quot;);&amp;#125;var p = new Person(&quot;bb&quot;,&quot;20&quot;,&quot;11&quot;);console.log(p.name);f1(p);console.log(p.name);</code></pre><h2 id="2-1第一个输出结果"><a href="#2-1第一个输出结果" class="headerlink" title="2.1第一个输出结果"></a>2.1第一个输出结果</h2><p>定义变量p，给函数Person传参（”bb”,””），输出p.name = bb；</p><pre><code>bb</code></pre><h2 id="2-2第二个输出结果"><a href="#2-2第二个输出结果" class="headerlink" title="2.2第二个输出结果"></a>2.2第二个输出结果</h2><p>函数f1传参为p，执行如下，</p><pre><code class="javascript">var person = p;person.name = &quot;cc&quot;;//this.name = &quot;cc&quot;;person = new Person(&quot;aa&quot;,&quot;19&quot;,&quot;10&quot;)；//person.name = &#39;aa&#39;；//在堆内存中重新开辟空间存放</code></pre><p>输出结果为：</p><pre><code>cc</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
