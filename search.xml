<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mac下忘记mysql的root密码解决方法</title>
      <link href="/2020/08/15/mac-xia-wang-ji-mysql-de-root-mi-ma-jie-jue-fang-fa/"/>
      <url>/2020/08/15/mac-xia-wang-ji-mysql-de-root-mi-ma-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的数组</title>
      <link href="/2020/08/09/javascript-zhong-de-array-dui-xiang/"/>
      <url>/2020/08/09/javascript-zhong-de-array-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组是一种特殊的变量，可以在单个变量中存储多个值，并且可以通过索引快速访问这些值</p><h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><pre><code class="javascript">var arrayName = [a1,a2...]; //数组定义语法var animals = [&quot;lion&quot;,&quot;tiger&quot;]; //数组定义实例</code></pre><p>上面数组定义实例中，定义名为animals的数组，并为其赋值。</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>数组定义时，多个元素之间用逗号“,”隔开；</p><p>最后一个元素后请不要使用“,”；</p><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p>通过引用索引号来引用数组的某个元素值</p><pre><code class="javascript">var name = animals[0] ; //访问数组的第一个元素document.getElementByld(&quot;demo&quot;).innerHTML = animals ; //引用数组名访问整个数组</code></pre><p>该实例可以给“name”变量赋值，值为数组animals的第一个元素。</p><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><p>数组元素是从0开始索引，[0]为数组的第一个元素。</p><h2 id="修改数组元素"><a href="#修改数组元素" class="headerlink" title="修改数组元素"></a>修改数组元素</h2><pre><code class="javascript">animals[0] = &quot;elephants&quot; ;//修改数组animals中首个元素</code></pre><h2 id="数组与对象"><a href="#数组与对象" class="headerlink" title="数组与对象"></a>数组与对象</h2><p>数组是一种特殊类型的对象。在数组中使用数字来访问其元素，对象中使用名称来访问其“成员”。</p><pre><code class="javascript">//数组var animals = [&quot;lion&quot;,&quot;tiger&quot;];var name = animals[0]; //返回数组元素“lion”//对象var archives = &amp;#123;Name:&quot;John&quot;, career:&quot;worker&quot;, age:46&amp;#125;;archives.Name; //返回对象成员Name的值“John”</code></pre><h5 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h5><p>数组元素可以是对象、函数，甚至数组。</p><p>在 JavaScript 中，<strong>数组</strong>使用<strong>数字索引</strong>。</p><p>在 JavaScript 中，<strong>对象</strong>使用<strong>命名索引</strong>。</p><p><strong>数组是特殊类型的对象，具有数字索引。</strong></p><h2 id="数组属性与方法"><a href="#数组属性与方法" class="headerlink" title="数组属性与方法"></a>数组属性与方法</h2><h4 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h4><p>length属性返回数组的长度（元素个数）。</p><pre><code class="javascript">var animals = [&quot;lion&quot;,&quot;tiger&quot;];animals.length; //返回数组长度2</code></pre><h4 id="访问数组最后一个元素"><a href="#访问数组最后一个元素" class="headerlink" title="访问数组最后一个元素"></a>访问数组最后一个元素</h4><p>数组元素值得访问通过引用其索引达成，所以访问最后一个元素可以通过数组length属性完成。</p><pre><code class="javascript">var last = animals[animals.length-1]; //返回数组最后一个元素“tiger”</code></pre><h4 id="遍历数组元素"><a href="#遍历数组元素" class="headerlink" title="遍历数组元素"></a>遍历数组元素</h4><p>遍历数组元素通过for循环，结合数组length属性达成。</p><pre><code class="javascript">var animals, text, fLen, i;var animals = [&quot;lion&quot;,&quot;tiger&quot;];fLen = fruits.length; //数组长度text = &quot;&lt;ul&gt;&quot;;for (i = 0; i &lt; fLen; i++) &amp;#123;     text += &quot;&lt;li&gt;&quot; + fruits[i] + &quot;&lt;/li&gt;&quot;;&amp;#125; </code></pre><p><strong>注</strong>：也可以使用Array.foreach()函数，但是最安全的方法是使用for循环。</p><pre><code class="javascript">var animals, text;var animals = [&quot;lion&quot;,&quot;tiger&quot;];text = &quot;&lt;ul&gt;&quot;;animals.forEach(myFunction);text += &quot;&lt;/ul&gt;&quot;;function myFunction(value) &amp;#123;  text += &quot;&lt;li&gt;&quot; + value + &quot;&lt;/li&gt;&quot;;&amp;#125;</code></pre><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>使用push方法：</p><pre><code class="javascript">var animals = [&quot;lion&quot;,&quot;tiger&quot;];animals.push(&quot;elephants&quot;); //为数组添加新元素“elephants”</code></pre><p><strong>注：</strong>可以使用length属性添加新元素：</p><pre><code class="javascript">animals[animals.length] = &quot;elephants&quot; ;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文对</title>
      <link href="/2020/08/06/hui-wen-dui/"/>
      <url>/2020/08/06/hui-wen-dui/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一组 <strong>互不相同</strong> 的单词， 找出所有<strong>不同</strong> 的索引对<code>(i, j)</code>，使得列表中的两个单词， <code>words[i] + words[j]</code> ，可拼接成回文串。</p><p><strong>示例 1：</strong></p><pre><code>输入：[&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]输出：[[0,1],[1,0],[3,2],[2,4]] 解释：可拼接成的回文串为 [&quot;dcbaabcd&quot;,&quot;abcddcba&quot;,&quot;slls&quot;,&quot;llssssll&quot;]</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：[&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]输出：[[0,1],[1,0]] 解释：可拼接成的回文串为 [&quot;battab&quot;,&quot;tabbat&quot;]</code></pre><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="暴力验证法（python字典）："><a href="#暴力验证法（python字典）：" class="headerlink" title="暴力验证法（python字典）："></a>暴力验证法（python字典）：</h2><p>在字典数存储所有的字符串，再将待查询的字符串逆序在字典树中进行遍历，判断其是否存在。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js中变量的作用域</title>
      <link href="/2020/08/06/js-zhong-bian-liang-de-zuo-yong-yu/"/>
      <url>/2020/08/06/js-zhong-bian-liang-de-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Js变量作用域"><a href="#1-Js变量作用域" class="headerlink" title="1:Js变量作用域"></a>1:Js变量作用域</h1><p>求以下代码的输出结果</p><pre><code class="javascript">var num1 = 50;var num2 = 60;function f1(num,num1) &amp;#123;    num = 100;    num1 = 100;    num2 = 100;//    console.log(num1);    console.log(num2);    console.log(num);&amp;#125;f1(num1,num2);console.log(num1);console.log(num2);console.log(num);</code></pre><h2 id="1-1在函数f1当中"><a href="#1-1在函数f1当中" class="headerlink" title="1.1在函数f1当中"></a>1.1在函数f1当中</h2><p>定义形式参数num、num1</p><p>传参num1，num2</p><pre><code class="javascript">var num = 50;var num1 = 60;</code></pre><p>f1函数中未定义num2，所以num2为全局变量num2</p><pre><code class="javascript">var num2 = 60;num2 = 100;</code></pre><p>输出结果为：</p><pre><code>100100100</code></pre><h2 id="1-2函数外输出"><a href="#1-2函数外输出" class="headerlink" title="1.2函数外输出"></a>1.2函数外输出</h2><p>在函数外，num1为全局变量，在函数f1中未做更改，输出50，num2为全局变量，但在函数f1中更新为100，故输出100，全局变量未定义num变量，打印输出结果报错。</p><pre><code>50100num is not defined</code></pre><h1 id="2值类型和引用类型的传递"><a href="#2值类型和引用类型的传递" class="headerlink" title="2值类型和引用类型的传递"></a>2值类型和引用类型的传递</h1><p>如下代码输出结果</p><pre><code class="js">function Person(name,age,salary)&amp;#123;    this.name = name ;    this.age = age ;    this.salary = salary ;&amp;#125;function f1(person) &amp;#123;    person.name = &quot;cc&quot;;    person = new Person(&quot;aa&quot;,&quot;19&quot;,&quot;10&quot;);&amp;#125;var p = new Person(&quot;bb&quot;,&quot;20&quot;,&quot;11&quot;);console.log(p.name);f1(p);console.log(p.name);</code></pre><h2 id="2-1第一个输出结果"><a href="#2-1第一个输出结果" class="headerlink" title="2.1第一个输出结果"></a>2.1第一个输出结果</h2><p>定义变量p，给函数Person传参（”bb”,””），输出p.name = bb；</p><pre><code>bb</code></pre><h2 id="2-2第二个输出结果"><a href="#2-2第二个输出结果" class="headerlink" title="2.2第二个输出结果"></a>2.2第二个输出结果</h2><p>函数f1传参为p，执行如下，</p><pre><code class="javascript">var person = p;person.name = &quot;cc&quot;;//this.name = &quot;cc&quot;;person = new Person(&quot;aa&quot;,&quot;19&quot;,&quot;10&quot;)；//person.name = &#39;aa&#39;；//在堆内存中重新开辟空间存放</code></pre><p>输出结果为：</p><pre><code>cc</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
