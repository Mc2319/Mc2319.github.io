<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo代码中大括号变成转义代码解决方法</title>
      <link href="/2020/09/06/hexo-dai-ma-zhong-da-gua-hao-bian-cheng-zhuan-yi-dai-ma-jie-jue-fang-fa/"/>
      <url>/2020/09/06/hexo-dai-ma-zhong-da-gua-hao-bian-cheng-zhuan-yi-dai-ma-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>在使用hexo搭建博客后，本地代码上传至服务器，在浏览器访问时，发现代码中<code>{}</code>变成了转义符号<code>&amp;#123 &amp;#125</code>，如图：</p><img src="/2020/09/06/hexo-dai-ma-zhong-da-gua-hao-bian-cheng-zhuan-yi-dai-ma-jie-jue-fang-fa/%E6%9C%AC%E5%9C%B0%E6%88%AA%E5%9B%BE.png" alt="本地Typora截图" style="zoom:50%;"><img src="/2020/09/06/hexo-dai-ma-zhong-da-gua-hao-bian-cheng-zhuan-yi-dai-ma-jie-jue-fang-fa/%E9%94%99%E8%AF%AF%E6%88%AA%E5%9B%BE.png" alt="浏览器访问截图" style="zoom:50%;"><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>经过验证，在hexo更新至高版本（5.0.0及以上），就会出现该问题，与主题无关，需要上游解决。目前采用方案为降低hexo版本，即可解决该问题。</p><p>问题讨论链接：<a href="https://github.com/blinkfox/hexo-theme-matery/issues/503" target="_blank" rel="noopener">hexo</a></p><p>更换版本操作：</p><pre class=" language-sh"><code class="language-sh">npm i hexo@4.1.1#建议网速慢的同学通过淘宝镜像cnpm操作cnpm i hexo@4.1.1</code></pre><p>降低hexo版本后问题解决，如图：</p><img src="/2020/09/06/hexo-dai-ma-zhong-da-gua-hao-bian-cheng-zhuan-yi-dai-ma-jie-jue-fang-fa/%E6%AD%A3%E7%A1%AE%E7%BB%93%E6%9E%9C.png" alt="浏览器截图" style="zoom:50%;"><p><strong>注</strong>：cnpm安装及hexo更新参照点击<a href="https://xmuli.tech/posts/cb1e6c4f/" target="_blank" rel="noopener">链接</a></p><h1 id="意外收获"><a href="#意外收获" class="headerlink" title="意外收获"></a>意外收获</h1><p>在之前hexo博客使用过程中，使用<code>hexo clean</code>命令后，提示报错：</p><pre class=" language-yml"><code class="language-yml">ERROR Plugin load failed: hexo-prism-pluginError: `prism_plugin` options should be added to _config.yml file</code></pre><p>但检查后发现<code>hexo-prism-plugin</code>插件文件及<code>_config.yml</code>配置文件均无问题，同时使用<code>hexo cl</code>命令时又无报错，该问题在降低hexo版本后也得到了解决，目前<code>hexo clean</code>使用无报错。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo解决方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷歌字体引用报错err_ssl_protocol_error</title>
      <link href="/2020/09/05/gu-ge-zi-ti-yin-yong-bao-cuo-err-ssl-protocol-error/"/>
      <url>/2020/09/05/gu-ge-zi-ti-yin-yong-bao-cuo-err-ssl-protocol-error/</url>
      
        <content type="html"><![CDATA[<h1 id="一-谷歌字体库字体的使用"><a href="#一-谷歌字体库字体的使用" class="headerlink" title="一.谷歌字体库字体的使用"></a>一.谷歌字体库字体的使用</h1><p>在学习过程中，在一个HTML中引入了谷歌字体，通过如下方式引入：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family<span class="token punctuation">=</span>Lobster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>在CSS中调用后，发现浏览器报错：</p><img src="/2020/09/05/gu-ge-zi-ti-yin-yong-bao-cuo-err-ssl-protocol-error/%E6%8A%A5%E9%94%99%E4%BB%A3%E7%A0%81.png" alt="报错信息" style="zoom:50%;"><p>经过验证发现<code>fonts.googleapis.com</code>服务已经挂掉，经过一番测试，发现正确的引入方式</p><p>1.访问<a href="http://www.googlefonts.net/" target="_blank" rel="noopener">Google Fonts中国</a></p><p>2.找到自己所需的字体，加入字体库，在<strong>嵌入</strong>菜单中复制引入代码</p><img src="/2020/09/05/gu-ge-zi-ti-yin-yong-bao-cuo-err-ssl-protocol-error/%E5%BC%95%E5%85%A5%E4%BB%A3%E7%A0%81.png" alt="引入代码" style="zoom:50%;"><p>3.按照CSS样式制定规则，使用即可。</p><h1 id="二-存在问题"><a href="#二-存在问题" class="headerlink" title="二.存在问题"></a>二.存在问题</h1><p>在引入成功后，发现有时网页打开速度较慢，经过对页面加载项分析，发现字体引用占用了大量的时间。为保障页面加载速度，可以将字体库字体本地化。网上也提出可以把链接指向360的公共库，但是本人测试并不可行，有兴趣可以自行尝试。</p><h4 id="本地化教程"><a href="#本地化教程" class="headerlink" title="本地化教程"></a>本地化教程</h4><h5 id="1-复制link标签中指向的链接，在浏览器打开，此时看到的就是一个css文件的内容，如图所示："><a href="#1-复制link标签中指向的链接，在浏览器打开，此时看到的就是一个css文件的内容，如图所示：" class="headerlink" title="1.复制link标签中指向的链接，在浏览器打开，此时看到的就是一个css文件的内容，如图所示："></a>1.复制<code>link</code>标签中指向的链接，在浏览器打开，此时看到的就是一个css文件的内容，如图所示：</h5><img src="/2020/09/05/gu-ge-zi-ti-yin-yong-bao-cuo-err-ssl-protocol-error/%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81%E6%88%AA%E5%9B%BE.png" alt="部分代码" style="zoom:50%;"><h5 id="2-在项目的CSS文件夹内新建一个css文件，将代码复制保存，在HTML文件中引用该css文件。"><a href="#2-在项目的CSS文件夹内新建一个css文件，将代码复制保存，在HTML文件中引用该css文件。" class="headerlink" title="2.在项目的CSS文件夹内新建一个css文件，将代码复制保存，在HTML文件中引用该css文件。"></a>2.在项目的CSS文件夹内新建一个css文件，将代码复制保存，在HTML文件中引用该css文件。</h5><h5 id="3-复制代码中url项，在浏览器中代开，按照提示操作下载字体文件，并将下载的字体文件保存在项目文件夹中。"><a href="#3-复制代码中url项，在浏览器中代开，按照提示操作下载字体文件，并将下载的字体文件保存在项目文件夹中。" class="headerlink" title="3.复制代码中url项，在浏览器中代开，按照提示操作下载字体文件，并将下载的字体文件保存在项目文件夹中。"></a>3.复制代码中<strong>url</strong>项，在浏览器中代开，按照提示操作下载字体文件，并将下载的字体文件保存在项目文件夹中。</h5><img src="/2020/09/05/gu-ge-zi-ti-yin-yong-bao-cuo-err-ssl-protocol-error/url%E5%9C%B0%E5%9D%80.png" alt="url地址" style="zoom:50%;"><h5 id="4-替换CSS文件中的url内容，将其更换为绝对路径引入。"><a href="#4-替换CSS文件中的url内容，将其更换为绝对路径引入。" class="headerlink" title="4.替换CSS文件中的url内容，将其更换为绝对路径引入。"></a>4.替换CSS文件中的<strong>url</strong>内容，将其更换为绝对路径引入。</h5><p>通过上面的方法，可以从本地访问谷歌字体库，页面加载效率将大大提升。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端推荐资料</title>
      <link href="/2020/09/02/qian-duan-tui-jian-zi-liao/"/>
      <url>/2020/09/02/qian-duan-tui-jian-zi-liao/</url>
      
        <content type="html"><![CDATA[<p>持续更新。。。</p><h1 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h1><p><a href="https://jquery.cuishifeng.cn/" target="_blank" rel="noopener">jQuery API中文文档</a></p><p><a href="http://www.yanhuangxueyuan.com/" target="_blank" rel="noopener">Three.js技术博客</a></p><p><a href="https://codepen.io/" target="_blank" rel="noopener">codepen前端特效网站</a></p><p><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue官方网站</a></p><p><a href="https://segmentfault.com/" target="_blank" rel="noopener">思否segmentfault问答社区</a></p><p><a href="http://flukeout.github.io/#" target="_blank" rel="noopener">CSS Diner选择器练习</a></p><h1 id="素材网站"><a href="#素材网站" class="headerlink" title="素材网站"></a>素材网站</h1><h4 id="色彩网站"><a href="#色彩网站" class="headerlink" title="色彩网站"></a>色彩网站</h4><p><a href="https://www.webdesignrankings.com/resources/lolcolors/" target="_blank" rel="noopener">LOLCOLORS前端颜色选取</a></p><p><a href="https://flatuicolors.com/" target="_blank" rel="noopener">FLAT UI COLORS2</a></p><p><a href="http://zhongguose.com/" target="_blank" rel="noopener">中国色</a></p><p><a href="https://colorhunt.co/" target="_blank" rel="noopener">colorhunt色彩狩猎</a></p><h4 id="图标库"><a href="#图标库" class="headerlink" title="图标库"></a>图标库</h4><p><a href="http://www.fontawesome.com.cn/icons-ui/" target="_blank" rel="noopener">The Icons图标库</a></p><p><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里巴巴矢量图标库</a></p><p><a href="https://www.easyicon.net/" target="_blank" rel="noopener">easyicon图标库</a></p><h4 id="图片素材库"><a href="#图片素材库" class="headerlink" title="图片素材库"></a>图片素材库</h4><p><a href="https://wallhere.com/zh/user/14286?__cf_chl_jschl_tk__=4a2cb0f3411000b477c1f5bfe7739f0d5d221d0e-1599061991-0-ARfYnJw2LrNSuyKZwyuTAJVkYBMSF89eHR3J30MWn_7-5_Wnb6oH0wHXAU-PvvC-kiW8vUdWVQDq8srXoHiOXMhNiP-81JF_d6S7INiusvV_Vm2G2Dvxf9rYJXyc4o3fhHlemXuhUxQ8lg2HItv40vr7KJsn731qgZjjDjTht5WDUXVCPiLbLn9ola6u6iXioe92BF2gA3_B4ler70W_c6VDVWADvEzRFDnws396IFzc8QYgPS59KjTcGIRK8w7dz7FEckRsRHgKN6s55DEIlBcMjgttTW2APYiHZVKrjhNKQrWM8-hXeVGQ9Su95k8-IlEGTFT_pVKCzZ7IIaEPpG9XwOTstq2Su1PklF3jDY-c" target="_blank" rel="noopener">wallhaven壁纸站</a></p><p><a href="https://www.pexels.com/zh-cn/" target="_blank" rel="noopener">Pexels图片素材库</a></p><p><a href="https://picsum.photos/" target="_blank" rel="noopener">Lorem Picsum</a></p><h4 id="音效库"><a href="#音效库" class="headerlink" title="音效库"></a>音效库</h4><p><a href="http://www.aigei.com/" target="_blank" rel="noopener">爱给音效素材库</a></p><h4 id="字体库"><a href="#字体库" class="headerlink" title="字体库"></a>字体库</h4><p><a href="http://www.googlefonts.net/" target="_blank" rel="noopener">谷歌字体库</a></p><h1 id="工具库"><a href="#工具库" class="headerlink" title="工具库"></a>工具库</h1><p><a href="https://tool.oschina.net/jscompress" target="_blank" rel="noopener">JS/CSS/HTML代码在线压缩</a></p><p><a href="http://hiwenku.com/" target="_blank" rel="noopener">嗨文库百度文档下载</a></p><p><a href="https://www.toolnb.com/" target="_blank" rel="noopener">爱资料在线工具</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记</title>
      <link href="/2020/08/27/qian-duan-xue-xi-bi-ji/"/>
      <url>/2020/08/27/qian-duan-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、HTML"><a href="#一、HTML" class="headerlink" title="一、HTML"></a>一、HTML</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><ul><li>HTML（全称HyperText Mark-up Language），是一种标识性语言，非编程语言，不能使用逻辑运算。是通过标签将网络上的文档进行统一，使分散的网络资源链接成为一个逻辑整体。</li><li>超文本：是一种组织信息的方式，通过超级链接将图片、视频、文字等多种媒介关联起来。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库中的SQL是如何执行的</title>
      <link href="/2020/08/24/mysql-shu-ju-ku-zhong-de-sql-shi-ru-he-zhi-xing-de/"/>
      <url>/2020/08/24/mysql-shu-ju-ku-zhong-de-sql-shi-ru-he-zhi-xing-de/</url>
      
        <content type="html"><![CDATA[<p>MySQL是一种C/S架构的数据库，即Client/Server架构，服务端程序使用的mysqld，MySQL流程图如下：</p><p><img src="/2020/08/24/mysql-shu-ju-ku-zhong-de-sql-shi-ru-he-zhi-xing-de/MySQL%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="MySQL流程图"></p><p>mysqld主要由三层组成：</p><ul><li><strong>连接层</strong>：户端与服务端建立连接，客户端发送SQL至服务端；</li><li><strong>SQL层</strong>：对SQL语句进行查询处理；</li><li><strong>存储引擎层</strong>：与数据库文件打交道，负责数据的存储和读取</li></ul><p>其中，SQL层结构如下：</p><p><img src="/2020/08/24/mysql-shu-ju-ku-zhong-de-sql-shi-ru-he-zhi-xing-de/SQL%E5%B1%82%E7%BB%93%E6%9E%84.jpg" alt="SQL层结构"></p><ul><li><strong>缓存查询</strong>：由于查询效率太低，MySQL8.0之后就不再有该功能。主要是在缓存中查询是否存在SQL语句，如果存在，则直接返回给客户端。</li><li><strong>解析器</strong>：对SQL语句进行语法分析、语义分析。</li><li><strong>优化器</strong>：确定SQL的执行路径（全表检索、索引检索等）。</li><li><strong>执行器</strong>：判断用户是否具备权限，如果具备权限就执行SQL语句并返回查询结果。在MySQL8.0之前的版本，如果设置了缓存查询，会将查询结果进行缓存。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>SQL 语句在 MySQL 中的流程是：<strong>SQL 语句→缓存查询→解析器→优化器→执行器</strong>。在一部分中，MySQL 和 Oracle 执行 SQL 的原理是一样的。</p><p>与 Oracle 不同的是，MySQL 的存储引擎采用了插件的形式，每个存储引擎都面向一种特定的数据库应用环境。同时开源的 MySQL 还允许开发人员设置自己的存储引擎，下面是一些常见的存储引擎：</p><ol><li>InnoDB 存储引擎：它是 MySQL 5.5 版本之后默认的存储引擎，最大的特点是支持事务、行级锁定、外键约束等。</li><li>MyISAM 存储引擎：在 MySQL 5.5 版本之前是默认的存储引擎，不支持事务，也不支持外键，最大的特点是速度快，占用资源少。</li><li>Memory 存储引擎：使用系统内存作为存储介质，以便得到更快的响应速度。不过如果 mysqld 进程崩溃，则会导致所有的数据丢失，因此我们只有当数据是临时的情况下才使用 Memory 存储引擎。</li><li>NDB 存储引擎：也叫做 NDB Cluster 存储引擎，主要用于 MySQL Cluster 分布式集群环境，类似于 Oracle 的 RAC 集群。</li><li>Archive 存储引擎：它有很好的压缩机制，用于文件归档，在请求写入时会进行压缩，所以也经常用来做仓库。</li></ol><p>需要注意的是，数据库的设计在于表的设计，而在 MySQL 中每个表的设计都可以采用不同的存储引擎，我们可以根据实际的数据处理需要来选择存储引擎，这也是 MySQL 的强大之处。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于hexo博客文章图片展示问题</title>
      <link href="/2020/08/21/guan-yu-hexo-bo-ke-wen-zhang-tu-pian-zhan-shi-wen-ti/"/>
      <url>/2020/08/21/guan-yu-hexo-bo-ke-wen-zhang-tu-pian-zhan-shi-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>博客搭建完成后，在编写博文的过程中，发现需要插入的图片在上传到服务端后不展示，经过一番百度、研究、探索，得出如下解决办法。</p><h1 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h1><p>在博客根目录下，更改配置参数；</p><pre class=" language-markdown"><code class="language-markdown">post<span class="token italic"><span class="token punctuation">_</span>asset<span class="token punctuation">_</span></span>folder: true<span class="token title important"><span class="token punctuation">#</span>表示开始使用本地静态资源</span></code></pre><p>更改完成后执行新建博客文件命令，如下：</p><pre><code>hexo new 文件名称</code></pre><p>添加这行配置后，在生成.md文件的同时，会生成一个同名文件夹，后续博文中用到的相关资源都可以放到该文件夹中。</p><h1 id="引入图片方式"><a href="#引入图片方式" class="headerlink" title="引入图片方式"></a>引入图片方式</h1><h4 id="markdown标准语法"><a href="#markdown标准语法" class="headerlink" title="markdown标准语法"></a>markdown标准语法</h4><p>在Typora中编辑markdown文件时，可以直接插入图片，语法如下：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token url">![图片别名][<span class="token variable">图片.jpg</span>]</span></code></pre><p>这样的好处是在本地Typora编辑器中直接预览。</p><p><strong>注：</strong>在不使用任何插件的情况下，在引用图片时，需要添加文件路径，才能在本地正常预览。但在正常写博文的情况下，不要添加文件夹路径，这是因为在**<code>hexo g</code><strong>命令执行后，会把</strong><u>.md</u><strong>文件渲染成为</strong><u>.html</u><strong>文件，并存放在</strong><code>public/年/月/日</code>**路径下的同名文件夹中，再把所对应的的文件夹下的静态资源，拷贝到该文件夹下，添加路径会导致最后渲染后无法正常显示。</p><h4 id="使用标签插件"><a href="#使用标签插件" class="headerlink" title="使用标签插件"></a>使用标签插件</h4><p>使用标签插件引入图片，语法如下：</p><pre><code>{% asset_img 图片.jpg 图片别名 %}</code></pre><p>该方式无法在本地编辑器预览文章图片。</p><h1 id="使用hexo-asset-image"><a href="#使用hexo-asset-image" class="headerlink" title="使用hexo-asset-image"></a>使用hexo-asset-image</h1><p>为了能够在<strong>本地编辑器里预览图片同时可以在网页中正常加载图片</strong>，引入<u><strong>hexo-asset-image</strong></u>插件，该插件解决的问题就是给本地图片添加绝对路径。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code>npm install hexo-asset-image --save</code></pre><p>安装完成后，在本地编辑器可以直接预览图片，在执行**<code>hexo g</code>**生成博客html文件后，发现渲染出来的图片标签使用的是如下路径：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/年/月/日/博客同名文件夹/图片.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>使用**<code>hexo-d</code>**上传至服务器，图片正常显示。</p><h4 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h4><p>在使用<strong>hexo-asset-image</strong>过程中，发现直接使用npm库中的，可能会导致BUG出现，图片在网页中无法正常加载（可能是npm库中的包未更新导致）。经过对渲染后的html文件进行查看，主要是由于路径错误问题引起的。情况如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/年/月/日/博客同名文件夹/年/月/日/图片.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 路径重复--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//.com/年/月/日/博客同名文件夹/图片.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 路径错误--></span></code></pre><h5 id="解决方案如下："><a href="#解决方案如下：" class="headerlink" title="解决方案如下："></a>解决方案如下：</h5><p>打开<strong>hexo-asset-image</strong>安装目录下<strong>index.js</strong>，替换为如下代码即可。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><span class="token keyword">function</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>hexo<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_post_render'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> config <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>post_asset_folder<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> link <span class="token operator">=</span> data<span class="token punctuation">.</span>permalink<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>version<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>       <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>       <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span>    <span class="token keyword">var</span> endPos <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    link <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">,</span> endPos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> toprocess <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'excerpt'</span><span class="token punctuation">,</span> <span class="token string">'more'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toprocess<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> key <span class="token operator">=</span> toprocess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        ignoreWhitespace<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        xmlMode<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        lowerCaseTags<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        decodeEntities<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// For windows style path, we replace '\' to '/'.</span>            <span class="token keyword">var</span> src <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/http[s]*.*|\/\/.*/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>               <span class="token operator">!</span><span class="token regex">/^\s*\//</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// For "about" page, the first part of "src" can't be removed.</span>              <span class="token comment" spellcheck="true">// In addition, to support multi-level local directory.</span>              <span class="token keyword">var</span> linkArray <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> srcArray <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> elem <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>srcArray<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>                srcArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              src <span class="token operator">=</span> srcArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>              console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update link as:-->"</span><span class="token operator">+</span>config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"no src attr, skipped..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于图片展示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL实现数据行转列</title>
      <link href="/2020/08/19/sql-shi-xian-shu-ju-xing-zhuan-lie/"/>
      <url>/2020/08/19/sql-shi-xian-shu-ju-xing-zhuan-lie/</url>
      
        <content type="html"><![CDATA[<p>数据分析中经典sql面试题，在做数据统计的时候会需要用到行转列，案例如下。</p><pre class=" language-mysql"><code class="language-mysql">--建表语句CREATE TABLE students( Id int NOT NULL PRIMARY KEY AUTO_INCREMENT, UserName VARCHAR(50) NULL, Subject VARCHAR(50) NULL, Source numeric(18, 0) NULL) ;--插入数据INSERT INTO students(UserName,Subject,Source) VALUES ('张三','语文',60);INSERT INTO students(UserName,Subject,Source) VALUES  ('李四','数学',75);INSERT INTO students(UserName,Subject,Source) VALUES  ('王五','英语',80);INSERT INTO students(UserName,Subject,Source) VALUES  ('王五','数学',70);INSERT INTO students(UserName,Subject,Source) VALUES  ('王五','语文',68);INSERT INTO students(UserName,Subject,Source) VALUES  ('李四','语文',80);INSERT INTO students(UserName,Subject,Source) VALUES  ('张三','英语',65);</code></pre><p>表结构与数据如下</p><p><img src="/2020/08/19/sql-shi-xian-shu-ju-xing-zhuan-lie/image-20200819200534591.png" alt="表结构"></p><p>需要实现如下查询结果：</p><p><img src="/2020/08/19/sql-shi-xian-shu-ju-xing-zhuan-lie/image-20200819200648860.png" alt="实现效果"></p><p><strong>实现如下：</strong>使用case when实现静态行专列</p><pre class=" language-mysql"><code class="language-mysql">--case1SELECT    UserName 姓名,    sum( CASE SUBJECT WHEN '语文' THEN Source ELSE 0 END ) 语文,    sum( CASE SUBJECT WHEN '数学' THEN Source ELSE 0 END ) 数学,    sum( CASE SUBJECT WHEN '英语' THEN Source ELSE 0 END ) 英语 FROM    students GROUP BY    UserName;--case2    SELECT    UserName 姓名,    max( CASE SUBJECT WHEN '语文' THEN Source ELSE 0 END ) 语文,    max( CASE SUBJECT WHEN '数学' THEN Source ELSE 0 END ) 数学,    max( CASE SUBJECT WHEN '英语' THEN Source ELSE 0 END ) 英语 FROM    students GROUP BY    UserName;</code></pre><p><strong>注意：</strong>sum、max均为实现聚合作用，以UserName分组聚合。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库存储过程</title>
      <link href="/2020/08/19/shu-ju-ku-cun-chu-guo-cheng/"/>
      <url>/2020/08/19/shu-ju-ku-cun-chu-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>引用《SQL必知必会》中的定义，存储过程就是为以后使用而保存的一条或多条 SQL 语句。</p><p>可将其视为批文件，虽然它们的作用不仅限于批处理。</p><p><strong>注意：</strong></p><p>微软的Access和SQLite不支持存储过程，MySQL 5.0之前的版本不支持存储过程；</p><p>相对于oracle数据库来说，MySQL存储过程相对功能较弱，使用较少。</p><h1 id="使用存储过程优缺点"><a href="#使用存储过程优缺点" class="headerlink" title="使用存储过程优缺点"></a>使用存储过程优缺点</h1><p><strong>优：</strong>存储过程相比较简单的SQL语句，有三个主要的好处，简单、安全、高性能；</p><ul><li><p>通过把处理封装在一个易用的单元中，可以简化复杂的操作</p></li><li><p>不要求反复建立一系列处理步骤，因而保证了数据的一致性</p></li><li><p>因为存储过程通常以编译过的形式存储，所以 DBMS 处理命令所需的 工作量少，提高了性能</p></li><li><p>存在一些只能用在单个请求中的 SQL 元素和特性，存储过程可以使用 它们来编写功能更强更灵活的代码</p></li></ul><p><strong>缺：</strong>存储过程也存在缺陷，比如移植性差，SQL语句更加复杂等。</p><ul><li><p>不同 DBMS 中的存储过程语法有所不同。所以编写真正的可移植存储过程几乎是不可能的。不过，存储过程的自我调用(名字以及数据如何传递)可以相对保持可移植。因此，如果需要移植到别的 DBMS， 至少客户端应用代码不需要变动。</p></li><li><p>一般来说，编写存储过程比编写基本 SQL 语句复杂，需要更高的技能， 更丰富的经验。因此，许多数据库管理员把限制存储过程的创建作为安全措施(主要受上一条缺陷的影响)。</p></li></ul><h1 id="创建删除存储过程"><a href="#创建删除存储过程" class="headerlink" title="创建删除存储过程"></a>创建删除存储过程</h1><p>创建存储过程：</p><pre class=" language-mysql"><code class="language-mysql">CREATE    [DEFINER = { user | CURRENT_USER }]　PROCEDURE sp_name ([proc_parameter[,...]])    [characteristic ...] routine_bodyproc_parameter:    [ IN | OUT | INOUT ] param_name typecharacteristic:    COMMENT 'string'  | LANGUAGE SQL  | [NOT] DETERMINISTIC  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }  | SQL SECURITY { DEFINER | INVOKER }routine_body:　　Valid SQL routine statement[begin_label:] BEGIN　　[statement_list]　　　　……END [end_label]</code></pre><p>声明存储过程</p><pre class=" language-mysql"><code class="language-mysql">CREATE PROCEDURE demo_in_parameter(IN p_in int);</code></pre><p>存储过程的开始和结束</p><pre class=" language-mysql"><code class="language-mysql">begin .... end</code></pre><p>变量赋值:</p><pre class=" language-mysql"><code class="language-mysql">SET @p_in=1  </code></pre><p>变量定义:</p><pre class=" language-mysql"><code class="language-mysql">DECLARE l_int int unsigned default 4000000; </code></pre><p>创建mysql存储过程、存储函数:</p><pre class=" language-mysql"><code class="language-mysql">create procedure 存储过程名(参数)</code></pre><p>存储过程体:</p><pre class=" language-mysql"><code class="language-mysql">create function 存储函数名(参数)</code></pre><p>删除存储过程</p><pre class=" language-mysql"><code class="language-mysql">drop procedure 存储过程名</code></pre><h1 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h1><p>存储过程是先编译后调用。事实上，在实际工作试用中。存储过程的执行远比编写要频繁的多。</p><pre class=" language-mysql"><code class="language-mysql">call 存储过程名 (执行参数) </code></pre><h1 id="存储过程的参数"><a href="#存储过程的参数" class="headerlink" title="存储过程的参数"></a>存储过程的参数</h1><p>在存储过程的定义中需要添加参数，格式如下</p><pre class=" language-mysql"><code class="language-mysql">create procedure 存储过程名([[in|out|inout] 参数名 数据类型...]);</code></pre><p><strong>注</strong></p><p><strong>in：</strong>输入参数，表示调用者向存储过程的传入值</p><p><strong>out：</strong>输出参数，表示存储过程向调用者的返回值，可以有多个且只能是变量</p><p><strong>INOUT：（少用）</strong>既表示调用者向过程传入值，又表示过程向调用者传出值（值只能是变量）</p><h1 id="存储过程的变量"><a href="#存储过程的变量" class="headerlink" title="存储过程的变量"></a>存储过程的变量</h1><h4 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h4><p>局部变量的定义需要放在存储过程体的开始</p><pre class=" language-mysql"><code class="language-mysql">--定义declare 变量名 变量数据类型 ;--实例DECLARE l_date date DEFAULT '1999-12-31'; </code></pre><h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><pre class=" language-mysql"><code class="language-mysql">set 变量名 = 值 ;</code></pre><h4 id="存储过程中使用用户变量实例"><a href="#存储过程中使用用户变量实例" class="headerlink" title="存储过程中使用用户变量实例"></a>存储过程中使用用户变量实例</h4><pre class=" language-mysql"><code class="language-mysql">--存储过程定义CREATE PROCEDURE GreetWorld( ) SELECT CONCAT(@greeting,' World');--变量赋值set @greeting='Hello';--调用存储过程CALL GreetWorld( );--输出结果+----------------------------+| CONCAT(@greeting,' World') |+----------------------------+| Hello World                |+----------------------------+1 row in set (0.01 sec)</code></pre><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>用户变量名一般用**@**开头；</p><p>用户变量过多会导致程序难以理解及管理，需合理使用。</p><h1 id="存储过程中的控制语句"><a href="#存储过程中的控制语句" class="headerlink" title="存储过程中的控制语句"></a>存储过程中的控制语句</h1><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><p>实例：</p><pre class=" language-mysql"><code class="language-mysql">mysql > DELIMITER //  mysql > CREATE PROCEDURE proc3()       -> begin      -> declare x1 varchar(5) default 'outer';       -> begin      -> declare x1 varchar(5) default 'inner';        -> select x1;        -> end;         -> select x1;       -> end;       -> //  mysql > DELIMITER ;</code></pre><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><h5 id="If-then-else语句"><a href="#If-then-else语句" class="headerlink" title="If-then-else语句"></a>If-then-else语句</h5><pre class=" language-mysql"><code class="language-mysql">mysql > DELIMITER //  mysql > CREATE PROCEDURE proc2(IN parameter int)       -> begin      -> declare var int;       -> set var=parameter+1;       -> if var=0 then      -> insert into t values(17);       -> end if;       -> if parameter=0 then      -> update t set s1=s1+1;       -> else      -> update t set s1=s1+2;       -> end if;       -> end;       -> //  mysql > DELIMITER ;</code></pre><h5 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h5><pre class=" language-mysql"><code class="language-mysql">mysql > DELIMITER //  mysql > CREATE PROCEDURE proc3 (in parameter int)       -> begin      -> declare var int;       -> set var=parameter+1;       -> case var       -> when 0 then        -> insert into t values(17);       -> when 1 then        -> insert into t values(18);       -> else        -> insert into t values(19);       -> end case;       -> end;       -> //  mysql > DELIMITER ; case    when var=0 then        insert into t values(30);    when var>0 then    when var<0 then    elseend case</code></pre><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><h5 id="while-····-end-while"><a href="#while-····-end-while" class="headerlink" title="while ···· end while"></a>while ···· end while</h5><p>在执行前进行检查。</p><pre class=" language-mysql"><code class="language-mysql">--格式while 条件 do        循环体end while;--实例mysql > DELIMITER //  mysql > CREATE PROCEDURE proc4()       -> begin      -> declare var int;       -> set var=0;       -> while var<6 do       -> insert into t values(var);       -> set var=var+1;       -> end while;       -> end;       -> //  mysql > DELIMITER ;</code></pre><h5 id="repeat····-end-repeat"><a href="#repeat····-end-repeat" class="headerlink" title="repeat···· end repeat"></a>repeat···· end repeat</h5><p>在执行操作后进行检查结果。</p><pre class=" language-mysql"><code class="language-mysql">--格式repeat         --循环体until 循环条件end repeat；--实例mysql > DELIMITER //  mysql > CREATE PROCEDURE proc5 ()       -> begin        -> declare v int;       -> set v=0;       -> repeat       -> insert into t values(v);       -> set v=v+1;       -> until v>=5       -> end repeat;       -> end;       -> //  mysql > DELIMITER ;</code></pre><h5 id="loop-·····endloop"><a href="#loop-·····endloop" class="headerlink" title="loop ·····endloop"></a>loop ·····endloop</h5><p>loop循环不需要初始条件，同时和repeat循环一样不需要结束天剑，leave语句的意义是离开循环。</p><pre class=" language-mysql"><code class="language-mysql">mysql > DELIMITER //  mysql > CREATE PROCEDURE proc6 ()       -> begin      -> declare v int;       -> set v=0;       -> LOOP_LABLE:loop       -> insert into t values(v);       -> set v=v+1;       -> if v >=5 then      -> leave LOOP_LABLE;       -> end if;       -> end loop;       -> end;       -> //  mysql > DELIMITER ;</code></pre><h5 id="lables标号"><a href="#lables标号" class="headerlink" title="lables标号"></a>lables标号</h5><p>标号可以用在 begin repeat while 或者 loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。</p><h4 id="iterate迭代"><a href="#iterate迭代" class="headerlink" title="iterate迭代"></a>iterate迭代</h4><p>iterate通过引用复合语句的标号，来重新开始复合语句</p><pre class=" language-mysql"><code class="language-mysql">mysql > DELIMITER //  mysql > CREATE PROCEDURE proc10 ()       -> begin      -> declare v int;       -> set v=0;       -> LOOP_LABLE:loop       -> if v=3 then        -> set v=v+1;       -> ITERATE LOOP_LABLE;       -> end if;       -> insert into t values(v);       -> set v=v+1;       -> if v>=5 then      -> leave LOOP_LABLE;       -> end if;       -> end loop;       -> end;       -> //  mysql > DELIMITER ;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断sql语句是否使用索引查询</title>
      <link href="/2020/08/19/pan-duan-sql-yu-ju-shi-fou-shi-yong-suo-yin-cha-xun/"/>
      <url>/2020/08/19/pan-duan-sql-yu-ju-shi-fou-shi-yong-suo-yin-cha-xun/</url>
      
        <content type="html"><![CDATA[<p>使用执行计划<strong>explain</strong>查看，在select语句之前添加explain，实例如下</p><pre><code>mysql&gt; explain SELECT * from mytable;+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+| id | select_type | table   | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+|  1 | SIMPLE      | mytable | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | NULL  |+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+1 row in set, 1 warning (0.00 sec)mysql&gt; </code></pre><p><strong>查询字段详解：</strong></p><p><strong>table：</strong>显示这一行的数据是关于哪张表的</p><p><strong>type：</strong>这是最重要的列，其结果从最好到最差的连接类型为</p><p><strong>system &gt; const &gt; eq_ref &gt; ref &gt;</strong> fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p><p>一般来说，得保证查询至少达到range级别，最好能达到ref。否则该sql存在性能问题，需要优化。</p><p><strong>possible_keys：</strong>显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句</p><p><strong>key：</strong> 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。这种情况下，可以在SELECT语句中使用USE INDEX（indexname）来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引</p><p><strong>key_len：</strong>使用的索引的长度。在不损失精确性的情况下，长度越短越好</p><p><strong>ref：</strong>显示索引的哪一列被使用了，如果可能的话，是一个常数</p><p><strong>rows：</strong>MYSQL认为必须检查的用来返回请求数据的行数</p><p><strong>Extra：</strong>关于MYSQL如何解析查询的额外信息。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/2020/08/19/mysql-suo-yin/"/>
      <url>/2020/08/19/mysql-suo-yin/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h1><p>索引作为最常见的SQL优化手段，其建立对于数据库性能是很重要的，可以大大提高数据库的检索速度、SQL执行效率。</p><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><pre class=" language-mysql"><code class="language-mysql">--指定列索引create index 索引名称 on 表名(索引列);--添加索引列alter table 表名 add index 索引名(列名)；创建表的时候指定索引列create table 表名(  a  int not null,  ...,  index (列名));</code></pre><p><strong>注意：</strong>如果遇到字段太长，无法添加索引且不能减少字段长度的时候，则可以指定索引长度；</p><pre class=" language-mysql"><code class="language-mysql">create index 索引名称 on 表名(索引列(size));</code></pre><p><strong>size</strong>为索引长度。</p><h4 id="创建唯一索引"><a href="#创建唯一索引" class="headerlink" title="创建唯一索引"></a>创建唯一索引</h4><p>与前面的普通索引类似，但索引列的值必须唯一，可以为null。如果是组合索引，则列值的组合必须唯一。</p><pre class=" language-mysql"><code class="language-mysql">--指定索引列create unique index 索引名 on 表名(索引列(size));--添加索引列alter table 表名 add unique 索引名(索引列(size));--创建表的时候指定索引列create table 表名(  a  int not null,  ...,  unique (列名));</code></pre><h4 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h4><p>显示表中索引相关信息，可以通过添加\G来格式化输出信息。</p><pre class=" language-mysql"><code class="language-mysql">show index from 表名;\G</code></pre><h4 id="查看SQL语句是否使用索引"><a href="#查看SQL语句是否使用索引" class="headerlink" title="查看SQL语句是否使用索引"></a>查看SQL语句是否使用索引</h4><p>使用<strong>explain</strong>，详见博文<a href="https://mc2319.github.io/2020/08/19/pan-duan-sql-yu-ju-shi-fou-shi-yong-suo-yin-cha-xun/" target="_blank" rel="noopener">判断sql语句是否使用索引查询</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL之case when函数</title>
      <link href="/2020/08/19/sql-zhi-case-when-han-shu/"/>
      <url>/2020/08/19/sql-zhi-case-when-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="case函数使用"><a href="#case函数使用" class="headerlink" title="case函数使用"></a>case函数使用</h1><p><strong>case</strong>具有简单case函数和case搜索函数两种格式。</p><p>实例：</p><pre class=" language-mysql"><code class="language-mysql">--创建表CREATE TABLE users (id INT, NAME varchar(16), sex int);--插入数据insert into users(id,name) values(1,'张一');insert into users(id,name,sex) values(2,'张二',1); insert into users(id,name) values(3,'张三');insert into users(id,name) values(4,'张四');insert into users(id,name,sex) values(5,'张五',2);insert into users(id,name,sex) values(6,'张六',1);insert into users(id,name,sex) values(7,'张七',2);insert into users(id,name,sex) values(8,'张八',1);--表数据select * from users--简单case函数SELECT    u.id,    u.NAME,    u.sex,    (CASE u.sex WHEN 1 THEN '男' WHEN 2 THEN '女' ELSE '空的' END)性别 FROM    users u;--case搜索函数SELECT    u.id,    u.NAME,    u.sex,    (CASE WHEN u.sex = '1' THEN '男' WHEN u.sex = '2' THEN '女' ELSE '空的' END)性别 FROM    users u;</code></pre><p>表结构及数据为</p><img src="/2020/08/19/sql-zhi-case-when-han-shu/abc.jpg" class title="表结构"><p>执行结果为</p><img src="/2020/08/19/sql-zhi-case-when-han-shu/%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%9B%BE%E7%89%87.png" class title="执行结果"><p>根据实例来看，两种方式可以实现相同的功能。简单case函数的写法相对比较简洁，但是和case搜索函数相比，功能方面会有些限制。</p><h1 id="case与sum（max）结合"><a href="#case与sum（max）结合" class="headerlink" title="case与sum（max）结合"></a>case与sum（max）结合</h1><p>case与sum结合使用，可以实现分段统计，实例如下：</p><pre class=" language-mysql"><code class="language-mysql">SELECT    sum( CASE u.sex WHEN 1 THEN 1 ELSE 0 END )男性,    sum( CASE u.sex WHEN 2 THEN 1 ELSE 0 END )女性,    sum( CASE WHEN u.sex <> 1 AND u.sex <> 2 THEN 1 ELSE 0 END )性别为空 FROM    users u;</code></pre><p>输出结果为：</p><img src="/2020/08/19/sql-zhi-case-when-han-shu/%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%E5%9B%BE%E7%89%87.png" class title="输出结果"><p><strong>注：</strong>使用该函数还可实现行转列的查询，详情见博文<a href="https://mc2319.github.io/2020/08/19/sql-shi-xian-shu-ju-xing-zhuan-lie/" target="_blank" rel="noopener">SQL实现数据行转列</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析师面试</title>
      <link href="/2020/08/17/shu-ju-fen-xi-shi-mian-shi/"/>
      <url>/2020/08/17/shu-ju-fen-xi-shi-mian-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析理论"><a href="#数据分析理论" class="headerlink" title="数据分析理论"></a>数据分析理论</h2><p>书籍推荐<strong>《数据分析：企业的贤内助》</strong>，书中通过故事场景搭建，来讲述数据分析的一些基本概念及对企业的帮助，相比枯燥的理论书籍，对入门者更友好一些。</p><h4 id="1、数据分析的目的或者作用"><a href="#1、数据分析的目的或者作用" class="headerlink" title="1、数据分析的目的或者作用"></a>1、数据分析的目的或者作用</h4><p>套用哆啦A梦的4个宝贝：</p><p>行为预见镜——帮助企业识别机会、规避风险；</p><p>问题药丸——帮助企业诊断问题、亡羊补牢；</p><p>跟踪摄像机——帮助企业评估效果、改进营销；</p><p>引力动力器——帮助企业提高效率、加强管理；</p><p>在回答该问题时，结合自己简历中的项目或者之前工作经验，选择与之拟合的点，展开描述，引导面试官向你熟悉的方向提问。</p><h4 id="2、数据分析的基本流程"><a href="#2、数据分析的基本流程" class="headerlink" title="2、数据分析的基本流程"></a>2、数据分析的基本流程</h4><p>设计方案——数据采集——数据处理（录入、清洗、加工等）——数据分析；</p><p>该流程在<strong>《数据分析：企业的贤内助》</strong>书中有更为详细的描述，可参考书中内容，面试时自行展开。</p><h4 id="3、简单介绍下之前自己使用的数据处理工具"><a href="#3、简单介绍下之前自己使用的数据处理工具" class="headerlink" title="3、简单介绍下之前自己使用的数据处理工具"></a>3、简单介绍下之前自己使用的数据处理工具</h4><p>使用过的工具有ETL工具（kettle）、数据库、Excel、python；</p><h4 id="4、数据缺失的时候，你该怎么处理"><a href="#4、数据缺失的时候，你该怎么处理" class="headerlink" title="4、数据缺失的时候，你该怎么处理"></a>4、数据缺失的时候，你该怎么处理</h4><p>删除还有缺失值的个别分析对象（简单删除法、权重法）；</p><p>缺失值补录（平均值补录、特殊值补录、人工填写、多重填补、回归方程填补、K最近距离邻法、就近补齐），由于在之前工作中经常使用平均值及K最近距离邻法补录数据，在回答时对这两个方案进行了展开描述，各位在面试时可以根据实际情况进行调节；</p><p>不处理。</p><h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><p>对sql语句及性能优化考察较多，本人初学入门使用书籍<strong>《sql必知必会》</strong>，可结合<a href="https://www.runoob.com/sql/sql-tutorial.html" target="_blank" rel="noopener">菜鸟教程SQL语句使用</a>基本可以满足大部分工作场景的使用。</p><h4 id="1、如何实现行转列（由于是电话面试，只描述了大概方法）"><a href="#1、如何实现行转列（由于是电话面试，只描述了大概方法）" class="headerlink" title="1、如何实现行转列（由于是电话面试，只描述了大概方法）"></a>1、如何实现行转列（由于是电话面试，只描述了大概方法）</h4><p>使用<strong>case when then</strong>的方法。详情见博文<a href="https://mc2319.github.io/2020/08/19/sql-zhi-case-when-han-shu/" target="_blank" rel="noopener">case when函数</a></p><h4 id="2、sql优化方式有哪些"><a href="#2、sql优化方式有哪些" class="headerlink" title="2、sql优化方式有哪些"></a>2、sql优化方式有哪些</h4><p>（1）建立索引，详见博文<a href="https://mc2319.github.io/2020/08/19/mysql-suo-yin/" target="_blank" rel="noopener">MySQL索引</a>；</p><p><strong>注意：</strong>避免在建立索引的数据列上进行下列操作：</p><p>◆避免对索引字段进行计算操作</p><p>◆避免在索引字段上使用not，&lt;&gt;，!=</p><p>◆避免在索引列上使用IS NULL和IS NOT NULL</p><p>◆避免在索引列上出现数据类型转换</p><p>◆避免在索引字段上使用函数</p><p>◆避免建立索引的列中使用空值</p><p>◆避免在复杂查询中使用like，**%**会导致相关列的索引无法使用，可以通过临时表做关联或采用其他解决办法实现相同效果。</p><p>（2）避免在<strong>where</strong>子句中使用in、not in、or或者having，可以使用exist 和not exist代替 in和not in；</p><pre class=" language-mysql"><code class="language-mysql">--优化前select 列名 from table1_name where id1 not in (select id2 from table2_name);--优化后select 列名 from table1_name where id1 not exist (select id2 from table2_name);</code></pre><p>不用使用字符格式声明数字(日期)的字符值，要使用数字格式声明，否则会使索引无效，产生全表扫描。</p><pre class=" language-mysql"><code class="language-mysql">--优化前select 列名from table_namewhere score = ‘100’;优化后select 列名from table_namewhere score = 100;</code></pre><p>（3）如表中数据量较大，分页查询使用到limit时，可以通过优化sql语句，减少回表操作。将查询条件放到子查询中，子查询只查询主键id，然后通过子查询查询到的确定的主键id关联查询其他的属性字段。</p><pre class=" language-mysql"><code class="language-mysql">--正常查询select 字段from table_namewhere 条件limit ..;--优化后sqlselect 字段from table_name 表1right join(  select 主键id  from table_name  where 条件  limit..;) 表2 on 表2主键id = 表1主键id;</code></pre><h4 id="3、怎么判断一个sql语句是否使用了索引"><a href="#3、怎么判断一个sql语句是否使用了索引" class="headerlink" title="3、怎么判断一个sql语句是否使用了索引"></a>3、怎么判断一个sql语句是否使用了索引</h4><p>在查询语句前加<strong>explain</strong>，详情见博文<a href="https://mc2319.github.io/2020/08/19/pan-duan-sql-yu-ju-shi-fou-shi-yong-suo-yin-cha-xun/" target="_blank" rel="noopener">判断sql语句是否使用索引查询</a></p><h4 id="4、是否使用过存储过程，怎么定义"><a href="#4、是否使用过存储过程，怎么定义" class="headerlink" title="4、是否使用过存储过程，怎么定义"></a>4、是否使用过存储过程，怎么定义</h4><p>见博文<a href="https://mc2319.github.io/2020/08/19/shu-ju-ku-cun-chu-guo-cheng/" target="_blank" rel="noopener">数据库存储过程</a></p><h2 id="数据分析可视化工具"><a href="#数据分析可视化工具" class="headerlink" title="数据分析可视化工具"></a>数据分析可视化工具</h2><p>Power BI、tableau等工具的一些使用经历，主要是简历项目中的一些细节问题。</p><h4 id="1、在项目过程中，数据源是什么形式，数据是怎么来的。"><a href="#1、在项目过程中，数据源是什么形式，数据是怎么来的。" class="headerlink" title="1、在项目过程中，数据源是什么形式，数据是怎么来的。"></a>1、在项目过程中，数据源是什么形式，数据是怎么来的。</h4><p>根据实际情况回答。</p><h4 id="2、Power-BI加载项有哪些，分别有什么作用"><a href="#2、Power-BI加载项有哪些，分别有什么作用" class="headerlink" title="2、Power BI加载项有哪些，分别有什么作用"></a>2、Power BI加载项有哪些，分别有什么作用</h4><ul><li>Power Query: 可以帮助查询，编辑和装载外部数据。</li><li>Power Pivot: 主要用于数据模型和数据分析。</li><li>Power View: 用于可视化设计和交互报告。</li><li>Power Map: 有助于显示3D地图视角。</li></ul><h2 id="统计学、数学基本理论"><a href="#统计学、数学基本理论" class="headerlink" title="统计学、数学基本理论"></a>统计学、数学基本理论</h2><p>答得较差，题目都忘了</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据分析中的包</title>
      <link href="/2020/08/17/python-shu-ju-fen-xi-zhong-de-bao/"/>
      <url>/2020/08/17/python-shu-ju-fen-xi-zhong-de-bao/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL执行顺序</title>
      <link href="/2020/08/17/sql-zhi-xing-shun-xu/"/>
      <url>/2020/08/17/sql-zhi-xing-shun-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h2><p>数据库作为作为数据分析的重要辅助工具之一，主要承担数据保存及数据准确、方便提取的功效，想要做到数据提取的准确性，关键在于业务需求理解能力、执行原理掌握的程度。此时，<strong>SQL子句的执行顺序</strong>就很重要了。</p><pre class=" language-mysql"><code class="language-mysql">select a,count(*) from test group by a having count(*) > 2; </code></pre><p><strong>思考：</strong>以上sql语句的执行顺序是什么<strong>？</strong></p><p>1、确定需要检索的数据库，执行<strong>from</strong></p><p>2、执行<strong>group by</strong>，对数据通过a列进行分组</p><p>3、执行<strong>having</strong>，过滤分组</p><p>4、执行<strong>select</strong>，返回查询结果</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>想要理解SQL子句执行顺序，其实也很简单，例如where、group by等均是为检索数据服务，所以需要在select之前执行；而order by、limit等均是为检索后数据进行操作（排序、限制行数等）；引用网上一张图展示执行过程如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9scE9CckxpYkxwdDV5VWliOVB6UVl2c0VsMjFIcGlhZ2R4U2pIM1BOSXFOU25Dd3pmWWxpYlJEcXRacnoyTWliNVhUT2h6MEdTd0V0cjhYcGpFaWE1YWhIV1kxZy82NDA?x-oss-process=image/format,png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL执行原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下忘记mysql的root密码解决方法</title>
      <link href="/2020/08/15/mac-xia-wang-ji-mysql-de-root-mi-ma-jie-jue-fang-fa/"/>
      <url>/2020/08/15/mac-xia-wang-ji-mysql-de-root-mi-ma-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="禁用验证登录数据库"><a href="#禁用验证登录数据库" class="headerlink" title="禁用验证登录数据库"></a>禁用验证登录数据库</h2><p>1关闭mysql服务，进入系统偏好设置-MySQL，点击Stop MySQL Server。</p><img src="/Users/mc/Library/Application Support/typora-user-images/image-20200817111853754.png" alt="image-20200817111853754" style="zoom:50%;"><img src="/Users/mc/Library/Application Support/typora-user-images/image-20200817111922604.png" alt="image-20200817111922604" style="zoom:50%;"><p>2、启动终端（terminal）</p><p>输入：</p><pre class=" language-shell"><code class="language-shell">sudo su //进入管理员模式cd /usr/local/mysql/bin/ //进入mysql目录 ./mysqld_safe --skip-grant-tables & //禁用mysql的验证功能</code></pre><p>3、通过mysql workbench进入数据库，此时已经不需要密码验证。</p><h4 id="通过此方法在忘记密码的情况下进入了数据库，但还是未能修改密码，难以保证以后是否会出问题。本人最后采用了重装mysql服务的方式彻底解决了问题，建议做好密码备份。"><a href="#通过此方法在忘记密码的情况下进入了数据库，但还是未能修改密码，难以保证以后是否会出问题。本人最后采用了重装mysql服务的方式彻底解决了问题，建议做好密码备份。" class="headerlink" title="通过此方法在忘记密码的情况下进入了数据库，但还是未能修改密码，难以保证以后是否会出问题。本人最后采用了重装mysql服务的方式彻底解决了问题，建议做好密码备份。"></a>通过此方法在忘记密码的情况下进入了数据库，但还是未能修改密码，难以保证以后是否会出问题。本人最后采用了<em>重装mysql服务</em>的方式彻底解决了问题，<em>建议做好密码备份</em>。</h4>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的数组</title>
      <link href="/2020/08/09/javascript-zhong-de-shu-zu/"/>
      <url>/2020/08/09/javascript-zhong-de-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组是一种特殊的变量，可以在单个变量中存储多个值，并且可以通过索引快速访问这些值</p><h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arrayName <span class="token operator">=</span> <span class="token punctuation">[</span>a1<span class="token punctuation">,</span>a2<span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组定义语法</span><span class="token keyword">var</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"lion"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组定义实例</span></code></pre><p>上面数组定义实例中，定义名为animals的数组，并为其赋值。</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>数组定义时，多个元素之间用逗号“,”隔开；</p><p>最后一个元素后请不要使用“,”；</p><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p>通过引用索引号来引用数组的某个元素值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> animals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//访问数组的第一个元素</span>document<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> animals <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//引用数组名访问整个数组</span></code></pre><p>该实例可以给“name”变量赋值，值为数组animals的第一个元素。</p><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><p>数组元素是从0开始索引，[0]为数组的第一个元素。</p><h2 id="修改数组元素"><a href="#修改数组元素" class="headerlink" title="修改数组元素"></a>修改数组元素</h2><pre class=" language-javascript"><code class="language-javascript">animals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"elephants"</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改数组animals中首个元素</span></code></pre><h2 id="数组与对象"><a href="#数组与对象" class="headerlink" title="数组与对象"></a>数组与对象</h2><p>数组是一种特殊类型的对象。在数组中使用数字来访问其元素，对象中使用名称来访问其“成员”。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//数组</span><span class="token keyword">var</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"lion"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> name <span class="token operator">=</span> animals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回数组元素“lion”</span><span class="token comment" spellcheck="true">//对象</span><span class="token keyword">var</span> archives <span class="token operator">=</span> <span class="token punctuation">{</span>Name<span class="token punctuation">:</span><span class="token string">"John"</span><span class="token punctuation">,</span> career<span class="token punctuation">:</span><span class="token string">"worker"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">46</span><span class="token punctuation">}</span><span class="token punctuation">;</span>archives<span class="token punctuation">.</span>Name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回对象成员Name的值“John”</span></code></pre><h5 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h5><p>数组元素可以是对象、函数，甚至数组。</p><p>在 JavaScript 中，<strong>数组</strong>使用<strong>数字索引</strong>。</p><p>在 JavaScript 中，<strong>对象</strong>使用<strong>命名索引</strong>。</p><p><strong>数组是特殊类型的对象，具有数字索引。</strong></p><h2 id="数组属性与方法"><a href="#数组属性与方法" class="headerlink" title="数组属性与方法"></a>数组属性与方法</h2><h4 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h4><p>length属性返回数组的长度（元素个数）。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"lion"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回数组长度2</span></code></pre><h4 id="访问数组最后一个元素"><a href="#访问数组最后一个元素" class="headerlink" title="访问数组最后一个元素"></a>访问数组最后一个元素</h4><p>数组元素值得访问通过引用其索引达成，所以访问最后一个元素可以通过数组length属性完成。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> last <span class="token operator">=</span> animals<span class="token punctuation">[</span>animals<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回数组最后一个元素“tiger”</span></code></pre><h4 id="遍历数组元素"><a href="#遍历数组元素" class="headerlink" title="遍历数组元素"></a>遍历数组元素</h4><p>遍历数组元素通过for循环，结合数组length属性达成。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> animals<span class="token punctuation">,</span> text<span class="token punctuation">,</span> fLen<span class="token punctuation">,</span> i<span class="token punctuation">;</span><span class="token keyword">var</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"lion"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fLen <span class="token operator">=</span> fruits<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组长度</span>text <span class="token operator">=</span> <span class="token string">"&lt;ul>"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     text <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;li>"</span> <span class="token operator">+</span> fruits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;/li>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><strong>注</strong>：也可以使用Array.foreach()函数，但是最安全的方法是使用for循环。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> animals<span class="token punctuation">,</span> text<span class="token punctuation">;</span><span class="token keyword">var</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"lion"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>text <span class="token operator">=</span> <span class="token string">"&lt;ul>"</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>myFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>text <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;/ul>"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  text <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;li>"</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"&lt;/li>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>使用push方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"lion"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"elephants"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//为数组添加新元素“elephants”</span></code></pre><p><strong>注：</strong>可以使用length属性添加新元素：</p><pre class=" language-javascript"><code class="language-javascript">animals<span class="token punctuation">[</span>animals<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"elephants"</span> <span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文对</title>
      <link href="/2020/08/06/hui-wen-dui/"/>
      <url>/2020/08/06/hui-wen-dui/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一组 <strong>互不相同</strong> 的单词， 找出所有<strong>不同</strong> 的索引对<code>(i, j)</code>，使得列表中的两个单词， <code>words[i] + words[j]</code> ，可拼接成回文串。</p><p><strong>示例 1：</strong></p><pre><code>输入：[&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]输出：[[0,1],[1,0],[3,2],[2,4]] 解释：可拼接成的回文串为 [&quot;dcbaabcd&quot;,&quot;abcddcba&quot;,&quot;slls&quot;,&quot;llssssll&quot;]</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：[&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]输出：[[0,1],[1,0]] 解释：可拼接成的回文串为 [&quot;battab&quot;,&quot;tabbat&quot;]</code></pre><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="暴力验证法（python字典）："><a href="#暴力验证法（python字典）：" class="headerlink" title="暴力验证法（python字典）："></a>暴力验证法（python字典）：</h2><p>在字典数存储所有的字符串，再将待查询的字符串逆序在字典树中进行遍历，判断其是否存在。</p>]]></content>
      
      
      <categories>
          
          <category> 力扣每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js中变量的作用域</title>
      <link href="/2020/08/06/js-zhong-bian-liang-de-zuo-yong-yu/"/>
      <url>/2020/08/06/js-zhong-bian-liang-de-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Js变量作用域"><a href="#1-Js变量作用域" class="headerlink" title="1:Js变量作用域"></a>1:Js变量作用域</h1><p>求以下代码的输出结果</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    num1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    num2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="1-1在函数f1当中"><a href="#1-1在函数f1当中" class="headerlink" title="1.1在函数f1当中"></a>1.1在函数f1当中</h2><p>定义形式参数num、num1</p><p>传参num1，num2</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span></code></pre><p>f1函数中未定义num2，所以num2为全局变量num2</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>num2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></code></pre><p>输出结果为：</p><pre><code>100100100</code></pre><h2 id="1-2函数外输出"><a href="#1-2函数外输出" class="headerlink" title="1.2函数外输出"></a>1.2函数外输出</h2><p>在函数外，num1为全局变量，在函数f1中未做更改，输出50，num2为全局变量，但在函数f1中更新为100，故输出100，全局变量未定义num变量，打印输出结果报错。</p><pre><code>50100num is not defined</code></pre><h1 id="2值类型和引用类型的传递"><a href="#2值类型和引用类型的传递" class="headerlink" title="2值类型和引用类型的传递"></a>2值类型和引用类型的传递</h1><p>如下代码输出结果</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">{</span>    person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"cc"</span><span class="token punctuation">;</span>    person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"19"</span><span class="token punctuation">,</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">,</span><span class="token string">"20"</span><span class="token punctuation">,</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-1第一个输出结果"><a href="#2-1第一个输出结果" class="headerlink" title="2.1第一个输出结果"></a>2.1第一个输出结果</h2><p>定义变量p，给函数Person传参（”bb”,””），输出p.name = bb；</p><pre><code>bb</code></pre><h2 id="2-2第二个输出结果"><a href="#2-2第二个输出结果" class="headerlink" title="2.2第二个输出结果"></a>2.2第二个输出结果</h2><p>函数f1传参为p，执行如下，</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> p<span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"cc"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this.name = "cc";</span>person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"19"</span><span class="token punctuation">,</span><span class="token string">"10"</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//person.name = 'aa'；</span><span class="token comment" spellcheck="true">//在堆内存中重新开辟空间存放</span></code></pre><p>输出结果为：</p><pre><code>cc</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建个人博客</title>
      <link href="/2020/08/01/shi-yong-hexo-da-jian-ge-ren-bo-ke/"/>
      <url>/2020/08/01/shi-yong-hexo-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>关于博客搭建的手把手操作视频，推荐b站up主<strong>CodeSheep</strong><a href="https://www.bilibili.com/video/BV1Yb411a7ty" target="_blank" rel="noopener">视频</a>。</p><p>本教程基于hexo+Macos搭建部分极少数操作与Linux及Windwos可能会有差异。</p><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><p>1.下载<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>进行安装；</p><pre><code>--查看node版本node -v</code></pre><p>2.打开终端，切换到root用户，并安装npm支持工具；</p><pre><code>--切换root用户sudo su--使用淘宝镜像源安装cnpmnpm install -g cnpm --registry=http://registry.npm.taobao.org</code></pre><p>3.使用cnpm安装hexo；</p><pre><code>--安装hexocnpm install -g hexo cli--查看hexo版本hexo -v</code></pre><h1 id="使用hexo搭建博客"><a href="#使用hexo搭建博客" class="headerlink" title="使用hexo搭建博客"></a>使用hexo搭建博客</h1><p>1.新建文件夹存放博客文件</p><pre><code>--新建文件夹mkdir blog文件夹--进入博客文件夹cd blog/</code></pre><p>2.初始化博客</p><pre><code>sudo hexo init</code></pre><p>3.在本地启动博客</p><pre><code>hexo s</code></pre><p>执行后在浏览器登录4000端口，看到如下界面，代表你博客已经搭建成功</p><p><img src="/2020/08/01/shi-yong-hexo-da-jian-ge-ren-bo-ke/image-20200823123716130.png" alt="初始化博客界面"></p><h1 id="博客部署-使用github"><a href="#博客部署-使用github" class="headerlink" title="博客部署(使用github)"></a>博客部署(使用github)</h1><p>1.登录github，并新建github仓库，名称必须是<code>github用户名.github.io</code>，如下：</p><p><img src="/2020/08/01/shi-yong-hexo-da-jian-ge-ren-bo-ke/image-20200823124348605.png" alt="新建github仓库"></p><p><strong>注：</strong>此处仓库名必须遵守规范，博客名称作为你的博客访问地址。</p><p>2.使用cnpm安装git插件</p><pre><code>cnpm install --save hexo-deployer-git </code></pre><p>3.修改hexo配置文件</p><p>打开hexo博客根目录中<strong>_config.yml</strong>文件，进行如下修改：</p><pre class=" language-markdown"><code class="language-markdown">deploy:  type: 'git'  repo: 你的github仓库地址  branch: master</code></pre><p><strong>注：</strong>由于该配置文件使用markdown标准语法，在每一个 <strong><u>:</u></strong> 后面<strong>必须</strong>保留一个空<strong>格</strong>。</p><p>4.部署博客到远端</p><pre><code>hexo d</code></pre><p>按照要求输入github账号密码，即可推送至源端。部署完成后通过仓库名称在浏览器访问博客。</p><h1 id="博客个性化"><a href="#博客个性化" class="headerlink" title="博客个性化"></a>博客个性化</h1><p>本人使用的主题是<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener"><strong>hexo-theme-matery</strong></a>，可根据个人喜好自己更换主题。</p><p>1.下载主题文件至本地</p><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery.git themes/blinkfox</code></pre><p>下载完成后，可在**./themes/blinkfox<strong>目录下查看主题文件，后续对主题所有的操作都在该目录下进行，主题的配置及使用查看</strong>READEME.md**文件即可。</p><p><img src="/2020/08/01/shi-yong-hexo-da-jian-ge-ren-bo-ke/image-20200823125753606.png" alt="主题文件夹"></p><p>2.配置主题至博客文件</p><p>打开hexo博客根目录中<strong>_config.yml</strong>文件，进行如下修改：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 修改为自己的主题名</span>theme: blinkfox</code></pre><p>修改完成后，即可生效。具体美化及其他操作请根据<strong>READEME.md</strong>文件自行操作。</p><h1 id="博客常识"><a href="#博客常识" class="headerlink" title="博客常识"></a>博客常识</h1><h4 id="常用文件及文件名"><a href="#常用文件及文件名" class="headerlink" title="常用文件及文件名"></a>常用文件及文件名</h4><p>根目录_config.yml**：重要文件，博客相关的大多数配置均需要在该文件中操作</p><p>主题目录<strong>_config.yml</strong>：主题相关的配置文件</p><p>根目录node_modules**文件夹：安装的插件之类存放文件夹</p><p>根目录<strong>public</strong>文件夹：执行<strong>hexo g</strong>后生成的文件，存放网页相关的页面及资源文件</p><p>根目录<strong>source/_post</strong>：执行<strong>hexo new</strong>后生成的markdown格式的博客文件存放文至</p><p>根目录<strong>themes</strong>：存放博客主题位置</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>更改博客后推送博客至服务器按照顺序执行如下前三个命令。</p><pre><code>hexo clean/cl：清理博客（会删除public等文件夹及文件）hexo g：生成博客文件（会生成public等文件夹及文件）hexo d：推送博客至服务器hexo new 文件名：新建博客hexo s 启动博客服务，通过4000端口在本地调试预览</code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下python安装与配置</title>
      <link href="/2020/08/01/mac-xia-python-an-zhuang-yu-pei-zhi/"/>
      <url>/2020/08/01/mac-xia-python-an-zhuang-yu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>操作系统：macos</p><p>编译器：<strong>Pycharm</strong>（收费，较为笨重）；<strong>vscode</strong>（免费，轻便，可扩展性强，推荐）</p><p>本文基于macos+vscode进行安装配置python开发环境。</p><h4 id="1-安装Python"><a href="#1-安装Python" class="headerlink" title="1.安装Python"></a>1.安装Python</h4><p>macos本身自带python2.7，版本较为老旧，建议安装python3。访问官网下载安装即可。<a href="https://www.python.org/" target="_blank" rel="noopener">python官网</a></p><p><strong>注：</strong>安装时注意配置好环境变量</p><p>安装完成后，在<strong>terminal</strong>中输入<code>python3</code>即可直接进入python命令行。</p><p><img src="/2020/08/01/mac-xia-python-an-zhuang-yu-pei-zhi/image-20200823190835827.png" alt="python命令行"></p><h4 id="2-安装vscode"><a href="#2-安装vscode" class="headerlink" title="2.安装vscode"></a>2.安装vscode</h4><p>直接在官网下载<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vscode</a>或者<a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">pycharm</a>，这里还是推荐vscode，免费的，不需要破解，下载完成后安装即可。</p><h4 id="3-配置vscode"><a href="#3-配置vscode" class="headerlink" title="3.配置vscode"></a>3.配置vscode</h4><p>打开vscode后，需要安装Python插件，如图：</p><p><img src="/2020/08/01/mac-xia-python-an-zhuang-yu-pei-zhi/image-20200823185955605.png" alt="安装python插件"></p><p>选择如图插件并点击install安装程序。</p><h4 id="4-选择Python解释器"><a href="#4-选择Python解释器" class="headerlink" title="4.选择Python解释器"></a>4.选择Python解释器</h4><p>由于Python是一种解释型语言，你必须告诉vscode使用哪个版本的解释器。插件安装完成后，可以通过<strong>命令面板</strong>（⇧⌘P）选择一个Python解释器，在弹出的框内输入python，选择<strong>Python:选择解析器</strong>，选择你需要使用的Python版本。如图：</p><p><img src="/2020/08/01/mac-xia-python-an-zhuang-yu-pei-zhi/image-20200823192131678.png" alt="命令面板"></p><p><img src="/2020/08/01/mac-xia-python-an-zhuang-yu-pei-zhi/image-20200823192443995.png" alt="选择你需要的解释器版本"></p><p>或者你也可以在vscode下方状态栏选择。</p><p><img src="/2020/08/01/mac-xia-python-an-zhuang-yu-pei-zhi/image-20200823192604861.png" alt="状态栏显示解释器版本"></p><h4 id="5-引入第三方库"><a href="#5-引入第三方库" class="headerlink" title="5.引入第三方库"></a>5.引入第三方库</h4><p>Python的强大与易用，正式由于其大量的第三方库支撑（数据分析的matplotlib、numpy，HTML解析的beautifulsoup等），下面展示如何引用代码库。</p><p>以<strong>matplotlib</strong>为例</p><ol><li><p>安装<strong>matplotlib</strong>包，运行terminal，输入如下命令</p><pre><code>pip install matplotlib  --使用pip安装python包</code></pre><p>由于国内访问可能较慢，会出现<code>code EINTEGRITY</code>的错误信息，建议使用国内镜像源进行安装。</p><pre><code>---国内镜像源推荐清华大学：https://pypi.tuna.tsinghua.edu.cn/simple阿里云：http://mirrors.aliyun.com/pypi/simple/豆瓣：http://pypi.douban.com/simple/---使用方法pip install 包名称 -i https://pypi.tuna.tsinghua.edu.cn/simple</code></pre></li><li><p>运行调试代码</p></li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#绘制曲线图</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#绘制散点图</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">6.6</span><span class="token punctuation">,</span> <span class="token number">7.0</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出结果如下</p><p><img src="/2020/08/01/mac-xia-python-an-zhuang-yu-pei-zhi/image-20200823202131629.png" alt="曲线图"></p><p><img src="/2020/08/01/mac-xia-python-an-zhuang-yu-pei-zhi/image-20200823202154160.png" alt="散点图"></p><h4 id="6-vscode插件推荐"><a href="#6-vscode插件推荐" class="headerlink" title="6.vscode插件推荐"></a>6.vscode插件推荐</h4><p>Bracket Pair Colorizer 2：用不同颜色区别括号，更加直观。</p><p><img src="/2020/08/01/mac-xia-python-an-zhuang-yu-pei-zhi/image-20200823202538067.png" alt="示例图"></p><p>Chinese：顾名思义，vscode中文补丁，英语差的同学福音。</p><p>Code Spell Checker：单词拼写检查，可提供正确单词替换。</p><p>Guides：缩进检查。</p><p>koroFileHeader：文件头注释和函数头注释工具，可一键生成。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL数据检索</title>
      <link href="/2020/07/23/sql-shu-ju-jian-suo/"/>
      <url>/2020/07/23/sql-shu-ju-jian-suo/</url>
      
        <content type="html"><![CDATA[<p>数据检索是数据库中最常用的功能，是从一个表或多个表中检索出想要的数据。<code>SELECT</code>语句可以说是SQL中最常用的语句了，本文主要基于<strong>MySQL</strong>讲解数据库的基础查询。</p><p>本文使用表建表语句</p><pre class=" language-mysql"><code class="language-mysql">#student表/* Navicat Premium Data Transfer Source Server         : study Source Server Type    : MySQL Source Server Version : 80021 Source Host           : localhost:3306 Source Schema         : study Target Server Type    : MySQL Target Server Version : 80021 File Encoding         : 65001 Date: 24/08/2020 00:00:27*/SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS = 0;-- ------------------------------ Table structure for students-- ----------------------------DROP TABLE IF EXISTS `students`;CREATE TABLE `students` (  `Id` int NOT NULL AUTO_INCREMENT,  `UserName` varchar(50) DEFAULT NULL,  `Subject` varchar(50) DEFAULT NULL,  `Source` decimal(18,0) DEFAULT NULL,  PRIMARY KEY (`Id`)) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;-- ------------------------------ Records of students-- ----------------------------BEGIN;INSERT INTO `students` VALUES (1, '张三', '语文', 60);INSERT INTO `students` VALUES (2, '李四', '数学', 75);INSERT INTO `students` VALUES (3, '王五', '英语', 80);INSERT INTO `students` VALUES (4, '王五', '数学', 70);INSERT INTO `students` VALUES (5, '王五', '语文', 68);INSERT INTO `students` VALUES (6, '李四', '语文', 80);INSERT INTO `students` VALUES (7, '张三', '英语', 65);COMMIT;SET FOREIGN_KEY_CHECKS = 1;</code></pre><h4 id="查询数据列"><a href="#查询数据列" class="headerlink" title="查询数据列"></a>查询数据列</h4><h5 id="1-单列查询"><a href="#1-单列查询" class="headerlink" title="1.单列查询"></a>1.单列查询</h5><pre class=" language-mysql"><code class="language-mysql">#查询语句SELECT 列名 FROM 表名;#实例select UserName from students;</code></pre><p>输出结果：</p><img src="/2020/07/23/sql-shu-ju-jian-suo/QQ20200824-000153@2x.png" alt="列检索输出结果" style="zoom:50%;"><h5 id="2-多列查询"><a href="#2-多列查询" class="headerlink" title="2.多列查询"></a>2.多列查询</h5><pre class=" language-mysql"><code class="language-mysql">#查询语句SELECT 列名1,列名2,...列名n FROM 表名;#实例SELECT UserName,SUBJECT FROM students;</code></pre><p>输出结果：</p><img src="/2020/07/23/sql-shu-ju-jian-suo/QQ20200824-000613@2x.png" alt="多列查询" style="zoom:50%;"><h5 id="3-全表查询"><a href="#3-全表查询" class="headerlink" title="3.全表查询"></a>3.全表查询</h5><pre class=" language-mysql"><code class="language-mysql">#查询语句SELECT * FROM 表名;#实例SELECT * FROM students;</code></pre><p>输出结果：</p><img src="/2020/07/23/sql-shu-ju-jian-suo/%E5%85%A8%E8%A1%A8%E6%9F%A5%E8%AF%A2.png" alt="全表查询" style="zoom:50%;"><h5 id="4-别名"><a href="#4-别名" class="headerlink" title="4.别名"></a>4.别名</h5><pre class=" language-mysql"><code class="language-mysql">#查询语句SELECT 列名1 AS 别名1,列名2 AS 别名2,...列名n AS 别名n FROM 表名;SELECT 列名1 别名1,列名2 别名2,...列名n 别名n FROM 表名;#实例SELECT UserName AS 姓名,SUBJECT AS 课程 FROM students;SELECT UserName 姓名,SUBJECT 课程 FROM students;</code></pre><p>上述两个语句输出结果均如下：</p><img src="/2020/07/23/sql-shu-ju-jian-suo/%E8%B5%B7%E5%88%AB%E5%90%8D.png" alt="起别名" style="zoom:50%;"><h5 id="5-查询去重"><a href="#5-查询去重" class="headerlink" title="5.查询去重"></a>5.查询去重</h5><pre class=" language-mysql"><code class="language-mysql">#查询语句SELECT DISTINCT 列名 FROM 表名;#实例SELECT DISTINCT SUBJECT FROM students;</code></pre><p>输出结果如下：</p><img src="/2020/07/23/sql-shu-ju-jian-suo/%E6%9F%A5%E8%AF%A2%E5%8E%BB%E9%87%8D.png" alt="查询去重" style="zoom:50%;"><p><strong>注：</strong></p><ul><li><code>DISTINCT</code>需要放到所有列名的前面，否则会报错；</li><li><code>DISTINCT</code>会对后面所有的列名的组合进行去重。</li></ul><h5 id="6-排序"><a href="#6-排序" class="headerlink" title="6.排序"></a>6.排序</h5><pre class=" language-mysql"><code class="language-mysql">#查询语句SELECT 列名1,列名2 FROM students ORDER BY 排序列 DESC;#实例SELECT UserName,Source FROM students ORDER BY Source;</code></pre><p>输出结果如下：</p><p><img src="/2020/07/23/sql-shu-ju-jian-suo/%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2.png" alt="排序"></p><p><strong>注：</strong></p><ul><li><code>ORDER BY</code>后面可以有一个或者多个列名，多个列名的情况下会按照第一列进行排序，当第一列值相同时，再按照后面的列进行排序；</li><li><code>ORDER BY</code>默认使用递增（<code>ASC</code>）排序，在排序的时候也可以注明排序规则，<code>ASC</code>代表递增排序，<code>DESC</code>代表递减排序；</li><li><code>ORDER BY</code> 可以使用非选择列进行排序，所以即使在 <code>SELECT</code> 后面没有这个列名，你同样可以放到 <code>ORDER BY</code> 后面进行排序；</li><li><code>ORDER BY</code> 语句通常位于<code>SELECT</code>语句的最后一个子句。</li></ul><h5 id="7-分组查询"><a href="#7-分组查询" class="headerlink" title="7.分组查询"></a>7.分组查询</h5><pre class=" language-mysql"><code class="language-mysql">#查询语句SELECT 列名,COUNT(*) FROM 表名 GROUP BY 列名; #分组查询SELECT 列名,COUNT(*) FROM 表名 GROUP BY 列名 HAVING COUNT(*) > n;#过滤分组SELECT 列名,COUNT(*) FROM 表名 WHERE 条件 GROUP BY 列名 HAVING COUNT(*) > n;#过滤分组并添加条件实例SELECT UserName,COUNT(*) FROM students GROUP BY UserName;SELECT UserName,COUNT(*) FROM students GROUP BY UserName HAVING COUNT(*) > 2;SELECT UserName,COUNT(*) FROM students WHERE UserName = "张三" GROUP BY UserName HAVING COUNT(*) < 3;</code></pre><p>执行结果如下：</p><img src="/2020/07/23/sql-shu-ju-jian-suo/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2.png" alt="分组查询" style="zoom:50%;"><img src="/2020/07/23/sql-shu-ju-jian-suo/%E8%BF%87%E6%BB%A4%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2.png" alt="过滤分组查询" style="zoom:50%;"><img src="/2020/07/23/sql-shu-ju-jian-suo/%E8%BF%87%E6%BB%A4%E5%88%86%E7%BB%84%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%9D%A1%E4%BB%B6.png" alt="过滤分组+where" style="zoom:50%;"><p><strong>注：</strong></p><ul><li><p>GROUP BY 子句可以包含任意数目的列，因而可以对分组进行嵌套， 更细致地进行数据分组。</p></li><li><p>如果在 GROUP BY 子句中嵌套了分组，数据将在最后指定的分组上进 行汇总。换句话说，在建立分组时，指定的所有列都一起计算(所以 不能从个别的列取回数据)。</p></li><li><p>GROUP BY 子句中列出的每一列都必须是检索列或有效的表达式(但 不能是聚集函数)。如果在 SELECT 中使用表达式，则必须在 GROUP BY 子句中指定相同的表达式。不能使用别名。</p></li><li><p>大多数 SQL 实现不允许 GROUP BY 列带有长度可变的数据类型(如文 本或备注型字段)。</p></li><li><p>除聚集计算语句外，SELECT 语句中的每一列都必须在 GROUP BY 子句 中给出。</p></li><li><p>如果分组列中包含具有 NULL 值的行，则 NULL 将作为一个分组返回。 如果列中有多行 NULL 值，它们将分为一组。</p></li><li><p>GROUP BY 子句必须出现在 WHERE 子句之后，ORDER BY 子句之前。</p></li></ul><h5 id="8-约束返回结果的数量"><a href="#8-约束返回结果的数量" class="headerlink" title="8.约束返回结果的数量"></a>8.约束返回结果的数量</h5><p>使用<code>LIMIT</code>关键字进行。</p><pre class=" language-mysql"><code class="language-mysql">#查询语句SELECT * FROM 表名 LIMIT 行数n;  #返回n条记录SELECT * FROM 表名 LIMIT 偏移量m,行数n; #返回m+1至n行数据#实例SELECT * FROM students LIMIT 3;SELECT * FROM students LIMIT 1,7;</code></pre><p>输出结果如下：</p><img src="/2020/07/23/sql-shu-ju-jian-suo/limit%203.png" alt="limit 3" style="zoom:50%;"><img src="/2020/07/23/sql-shu-ju-jian-suo/%E4%B8%A4%E4%B8%AA%E5%8F%82%E6%95%B0.png" alt="LIMIT 1,7" style="zoom:50%;"><p><strong>注：</strong>合理使用<code>LIMIT</code>可以适当提升查询语句执行效率。</p><h5 id="9-查询语句执行顺序"><a href="#9-查询语句执行顺序" class="headerlink" title="9.查询语句执行顺序"></a>9.查询语句执行顺序</h5><ul><li>关键字的顺序</li></ul><pre class=" language-mysql"><code class="language-mysql">SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ...</code></pre><ul><li>执行顺序</li></ul><pre class=" language-mysql"><code class="language-mysql">FROM > WHERE > GROUP BY > HAVING > SELECT 的字段 > DISTINCT > ORDER BY > LIMIT</code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="1-SELECT执行原理"><a href="#1-SELECT执行原理" class="headerlink" title="1.SELECT执行原理"></a>1.SELECT执行原理</h5><ul><li><p>先从 FROM 这一步开始执行。在这个阶段，如果是多张表联查，还会经历下面的几个步骤：</p><ul><li>首先先通过 CROSS JOIN 求笛卡尔积，相当于得到虚拟表 vt（virtual table）1_1；</li><li>通过 ON 进行筛选，在虚拟表 vt1-1 的基础上进行筛选，得到虚拟表 vt1_2；</li><li>添加外部行。如果我们使用的是左连接、右链接或者全连接，就会涉及到外部行，也就是在虚拟表 vt1-2 的基础上增加外部行，得到虚拟表 vt1_3。</li></ul></li><li><p>如果我们操作的是两张以上的表，还会重复上面的步骤，直到所有表都被处理完为止。这个过程得到是我们的原始数据。</p></li><li><p>当我们拿到了查询数据表的原始数据，也就是最终的虚拟表 vt1，就可以在此基础上再进行 WHERE 阶段。在这个阶段中，会根据 vt1 表的结果进行筛选过滤，得到虚拟表 vt2。</p></li><li><p>然后进入第三步和第四步，也就是 GROUP 和 HAVING 阶段。在这个阶段中，实际上是在虚拟表 vt2 的基础上进行分组和分组过滤，得到中间的虚拟表 vt3 和 vt4。</p></li><li><p>当我们完成了条件筛选部分之后，就可以筛选表中提取的字段，也就是进入到 SELECT 和 DISTINCT 阶段。</p></li><li><p>首先在 SELECT 阶段会提取想要的字段，然后在 DISTINCT 阶段过滤掉重复的行，分别得到中间的虚拟表 vt5-1 和 vt5-2。</p></li><li><p>当我们提取了想要的字段数据之后，就可以按照指定的字段进行排序，也就是 ORDER BY 阶段，得到虚拟表 vt6。</p></li><li><p>最后在 vt6 的基础上，取出指定行的记录，也就是 LIMIT 阶段，得到最终的结果，对应的是虚拟表 vt7。</p></li></ul><h5 id="2-查询效率优化角度的注意事项"><a href="#2-查询效率优化角度的注意事项" class="headerlink" title="2.查询效率优化角度的注意事项"></a>2.查询效率优化角度的注意事项</h5><ul><li>在实际生产环境中，尽量减少使用<code>SELECT *</code>，只查询所需要的列；</li><li>多使用<code>LIMIT</code>约束条件；</li><li>关于汇总查询，一般情况下，从执行效率角度来说，<code>COUNT(*)</code> = <code>COUNT(1)</code> &gt; <code>COUNT(列名)</code>，除非有特殊情况，使用<code>COUNT(列名)</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS的四种调用方式</title>
      <link href="/2020/04/04/js-de-si-chong-diao-yong-fang-shi/"/>
      <url>/2020/04/04/js-de-si-chong-diao-yong-fang-shi/</url>
      
        <content type="html"><![CDATA[<p>JS中函数调用共有4中方式：方法调用模式、函数调用模式、构造器调用模式和apply调用模式。除了声明定义时的形参，每个函数还接收两个附加的参数：this和arguments。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//访问a和b</span>  <span class="token comment" spellcheck="true">//还有this、arguments</span><span class="token punctuation">}</span></code></pre><h4 id="1-方法调用模式"><a href="#1-方法调用模式" class="headerlink" title="1.方法调用模式"></a>1.方法调用模式</h4><p>函数被保存为对象的一个属性时，称为一个方法。方法被调用时，this被绑定到该对象。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义一个对象</span><span class="token keyword">var</span> MyObject <span class="token operator">=</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//方法</span>  increment<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>inc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方法接受一个可选参数，如果不是数字，默认使用数字1</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">typeof</span> inc <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">?</span> inc <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>MyObject<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span>MyObject<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行结果为1</span>Myobject<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span>MyObject<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行结果为3</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue之CLI</title>
      <link href="/2020/03/29/vue-zhi-cli/"/>
      <url>/2020/03/29/vue-zhi-cli/</url>
      
        <content type="html"><![CDATA[<h1 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h1><p>无论学习使用任何框架、技术，阅读<strong>官方文档</strong>都是第一选择<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">Vue.js官网</a>。</p><p>Vue.js的构建工具Vue-cli，加上Vue-router、Vuex、Vue-resource，就是注明的Vue.js全家桶系列，共同构成了一个完成的Vue项目的核心。</p><h1 id="二-安装使用"><a href="#二-安装使用" class="headerlink" title="二.安装使用"></a>二.安装使用</h1><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><p>使用npm命令安装</p><pre class=" language-sh"><code class="language-sh">#全局安装vue-clinpm install -g @vue/cli#oryarn global add @vue/cli#升级版本npm i -g @vue/cli</code></pre><p>安装完成后查看版本号，不报错即表示安装成功：</p><pre class=" language-sh"><code class="language-sh">vue -V #此处V大写</code></pre><p>关于webpack配置分析，请见<a href="https://segmentfault.com/a/1190000008644830" target="_blank" rel="noopener">链接</a></p><p>由于<code>Vue-cli3</code>之后创建的时候并不会自动创建<code>vue.config.js</code>，一般都是需要更改webpack配置的时候手动创建。</p><p>官网有关于审查webpack config的命令，需要可以使用<a href="https://cli.vuejs.org/zh/guide/webpack.html#%E5%AE%A1%E6%9F%A5%E9%A1%B9%E7%9B%AE%E7%9A%84-webpack-%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">审查项目的 webpack 配置</a></p><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><h5 id="创建hello-world项目"><a href="#创建hello-world项目" class="headerlink" title="创建hello world项目"></a>创建<strong>hello world</strong>项目</h5><pre class=" language-sh"><code class="language-sh">vue create hello-world#orvue ui</code></pre><p>按照提示选择配置项，此处需要注意的事，会提示你输入项目名称，直接回车表示使用默认项目名称，如要自己命名，需要注意项目名称<strong>不要使用大写</strong>，否则会报错<code>Sorry, name can no longer contain capital letters</code>看到下图即表示完成创建：</p><img src="/2020/03/29/vue-zhi-cli/QQ20200829-171400@2x.png" alt="创建成功" style="zoom:50%;"><h5 id="进入项目文件夹"><a href="#进入项目文件夹" class="headerlink" title="进入项目文件夹"></a>进入项目文件夹</h5><pre class=" language-sh"><code class="language-sh">cd hello #项目名称</code></pre><h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><pre class=" language-sh"><code class="language-sh">npm run serve</code></pre><p>在浏览器中访问<strong>8080</strong>端口，看到如下画面表示成功：</p><img src="/2020/03/29/vue-zhi-cli/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png" alt="启动服务成功" style="zoom:50%;"><p>如无法看到该页面，可能是本地的8080端口被占用，修改配置文件中端口号即可。</p><h4 id="3-部署"><a href="#3-部署" class="headerlink" title="3.部署"></a>3.部署</h4><p>构建项目</p><pre class=" language-sh"><code class="language-sh">npm run build </code></pre><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>新建项目后目录中文件及文件夹代表的意思</p><table><thead><tr><th>文件名称</th><th>作用</th></tr></thead><tbody><tr><td>node_modules文件夹</td><td>项目所依赖的node包文件</td></tr><tr><td>bulid文件夹</td><td>脚本目录，对webpack开发和打包的相关设置，入口文件、输出文件、使用模块等</td></tr><tr><td>src文件夹</td><td>源码文件夹，也是后续主要操作文件夹</td></tr><tr><td>src/assets文件夹</td><td>资源目录</td></tr><tr><td>src/components文件夹</td><td>组件目录</td></tr><tr><td>src/App.vue文件</td><td>页面Vue组件</td></tr><tr><td>src/main.js文件</td><td>页面入口js文件</td></tr><tr><td>package.json文件</td><td>项目描述文件</td></tr><tr><td>public/index.html文件</td><td>入口页面</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue之component</title>
      <link href="/2020/03/28/vue-zhi-component/"/>
      <url>/2020/03/28/vue-zhi-component/</url>
      
        <content type="html"><![CDATA[<h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h1><p>组件是Vue.js最强大功能之一，可以扩展HTML元素，封装可重用的代码。</p><p>注册组件语法如下</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>组件名称，配置选项<span class="token punctuation">)</span></code></pre><p>调用组件，在HTML代码中和标签语法类似</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>组件名</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>组件名</span><span class="token punctuation">></span></span></code></pre><p>Vue组件 = Vue实例 = new Vue(options)</p><h4 id="1-全局组件"><a href="#1-全局组件" class="headerlink" title="1.全局组件"></a>1.全局组件</h4><p>直接注册组件，该组件所有实例可用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>todo<span class="token operator">-</span>item v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in groceryList"</span> v<span class="token operator">-</span>bind<span class="token punctuation">:</span>todo<span class="token operator">=</span><span class="token string">"item"</span> v<span class="token operator">-</span>bind<span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"item.id"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>todo<span class="token operator">-</span>item<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">// 组件定义</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-item'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'todo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token string">'&lt;li class="text">{{todo.text}}&lt;/li>'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//创建实例</span>        <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'hello vue!'</span><span class="token punctuation">,</span>                groceryList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    id <span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>                    text<span class="token punctuation">:</span> <span class="token string">"蔬菜"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                        id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                        text<span class="token punctuation">:</span> <span class="token string">"奶酪"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                        id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                        text<span class="token punctuation">:</span> <span class="token string">"随便其他人吃什么"</span>                    <span class="token punctuation">}</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>输出结果为</p><pre><code>hello vue!    1.蔬菜    2.奶酪    3.随便其他人吃什么</code></pre><h4 id="2-局部组件"><a href="#2-局部组件" class="headerlink" title="2.局部组件"></a>2.局部组件</h4><p>在实例中注册组件，组件只能在该实例中使用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>todo<span class="token operator">-</span>test<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>todo<span class="token operator">-</span>test<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token punctuation">{</span>          template<span class="token punctuation">:</span> <span class="token string">'&lt;li>hello，Vue!&lt;/li>'</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//定义实例局部组件</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token string">'todo-test'</span><span class="token punctuation">:</span> test            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>输出结果为：</p><pre><code>hello，Vue!</code></pre><p>Vue组件的<strong>缺点</strong></p><ul><li>全局定义：强制要求每个component中的命名不得重复</li><li>字符串模板：缺乏语法高亮，在HTML有多行时，需要用到\，代码不够整洁</li><li>不支持CSS：CSS会被遗漏</li><li>没有构建步骤：限制只能使用HTML和ES5 JavaScript，而 不能使用预处理器，如Pug（formerly Jade）和Babel</li></ul><p>在实际工作或项目中，更推荐使用<strong>单文件组件</strong>的模式，使用有如下优势</p><ul><li>完整语法高亮</li><li>CommonJS模块</li><li>组件作用域的CSS</li></ul><h1 id="二-组件的组成"><a href="#二-组件的组成" class="headerlink" title="二.组件的组成"></a>二.组件的组成</h1><h4 id="1-属性"><a href="#1-属性" class="headerlink" title="1.属性"></a>1.属性</h4><h5 id="自定义属性props"><a href="#自定义属性props" class="headerlink" title="自定义属性props"></a>自定义属性props</h5><p>组件props中声明的属性，Prop是子组件用来接收父组件传递过来的数据的一个自定义属性，父组件的数据需要通过props把数据传给子组件，子组件需要显式的用props选项声明“prop”</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>todo<span class="token operator">-</span>test message<span class="token operator">=</span><span class="token string">"hello，Vue!"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>todo<span class="token operator">-</span>test<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">//注册全局组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-test'</span> <span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//声明props属性</span>      props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;span>{{message}}&lt;/span>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>输出结果为：</p><pre><code>hello，Vue!</code></pre><h5 id="原生属性attrs"><a href="#原生属性attrs" class="headerlink" title="原生属性attrs"></a>原生属性attrs</h5><p>没有声明的熟悉，默认自动挂载到组件根元素上，设置<strong>inheritAttrs</strong>为<strong>false</strong>可以关闭自动挂载</p><h5 id="特殊属性class、style"><a href="#特殊属性class、style" class="headerlink" title="特殊属性class、style"></a>特殊属性class、style</h5><p>挂载到组件根元素上，支持字符串、对象、数组等多种语法</p><h4 id="2-事件"><a href="#2-事件" class="headerlink" title="2.事件"></a>2.事件</h4><h5 id="普通事件"><a href="#普通事件" class="headerlink" title="普通事件"></a>普通事件</h5><p>@click,@input,@change,@xxx等事件，通过<code>this.$emit(&#39;xxx&#39;,...)</code>触发。</p><h5 id="修饰符事件"><a href="#修饰符事件" class="headerlink" title="修饰符事件"></a>修饰符事件</h5><p>@input.trim,@click.stop,@submit.prevent等，一般用于原生HTML元素，自定义元素需要支持的话，需要自行开发支持。</p><h4 id="3-插槽"><a href="#3-插槽" class="headerlink" title="3.插槽"></a>3.插槽</h4><p>插槽分为<strong>普通插槽</strong>和<strong>作用域插槽</strong>，在2.6版本后，底层实现代码已经趋于相同，建议在开发过程中使用新语法进行开发。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//普通插槽</span><span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"XXX"</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>   <span class="token comment" spellcheck="true">//2.5版本</span><span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>XXX<span class="token operator">></span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>   <span class="token comment" spellcheck="true">//2.6版本</span><span class="token comment" spellcheck="true">//作用域插槽</span><span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"XXX"</span> slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">"props"</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>   <span class="token comment" spellcheck="true">//2.5版本</span><span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>XXX<span class="token operator">=</span><span class="token string">"props"</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>   <span class="token comment" spellcheck="true">//2.6版本</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础 </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器的工作原理</title>
      <link href="/2020/02/29/liu-lan-qi-de-gong-zuo-yuan-li/"/>
      <url>/2020/02/29/liu-lan-qi-de-gong-zuo-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>本文只是个人学习心得总结，更详细的讲解可点击链接查看：<a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" target="_blank" rel="noopener">新式浏览器的幕后揭秘</a></p><h1 id="一-浏览器历史"><a href="#一-浏览器历史" class="headerlink" title="一.浏览器历史"></a>一.浏览器历史</h1><ul><li>1991年，第一代网络浏览器WorldWideWeb</li><li>1993年，Mosaic，支持同时显示文本和图片</li><li>1994年，网景浏览器（Netscape Navigator），第一款商用浏览器，支持静态HTML，同年浏览器opera发布</li><li>1995年，微软发布IE浏览器，开始与网景的浏览器竞争，打响第一次浏览器大战</li><li>1996年，发布IE3.0，同时绑定Windows操作系统，网景占据主要市场</li><li>1998年，网景公司成立Mozilla基金会，并准备开发全新浏览器（Firefox）</li><li>1999年，由于IE浏览器的天生优势，市场份额不断提高至99%，第一次浏览器大战以微软胜利结束</li><li>2003年，苹果发布Safari浏览器</li><li>2004年，Mozilla发布火狐（Firefox）浏览器，搭配全新内核Gecko，支持用户拓展，市场份额稳步上升</li><li>2005年，苹果公司开源Safari浏览器内核webkit</li><li>2008年，谷歌（Chromium）浏览器发布，基于webkit内核</li><li>2010年，苹果发布Webkit2，改为多进程的结构模型</li><li>2013年，Google宣布全新内核项目——Blink</li><li>2015年，微软发布全新Edge浏览器，IE浏览器逐步退出舞台</li><li>2017年，Mozilla退出Quantum版本的Firefox浏览器</li><li>2019年，微软发布全新的Edge，支持插件使用，较上一代Edge浏览器有了较大提升</li></ul><h1 id="二-浏览器的组成"><a href="#二-浏览器的组成" class="headerlink" title="二.浏览器的组成"></a>二.浏览器的组成</h1><p>简单来说，浏览器是由用户界面+渲染引擎+浏览器引擎构成，其中渲染引擎又作为浏览器的核心。如图：</p><img src="/2020/02/29/liu-lan-qi-de-gong-zuo-yuan-li/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%84%E6%88%90.png" alt="浏览器结构图" style="zoom:50%;"><p><strong>用户界面（User Interface）</strong></p><p>工具栏、菜单栏、交互按钮等。</p><p><strong>浏览器引擎（Browser Engine）</strong></p><p>浏览器引擎是一个可嵌入组件，为渲染引擎提供高级接口；可以加载一个给定的URL，支持浏览器的诸多操作。</p><p><strong>渲染引擎（Rendering Engine）</strong></p><p>也就是俗称的内核，是浏览器的核心，内部包含HTML解析器，可以准确计算页面布局，显示HTML和XML文档，可以选择CSS样式，以及嵌入式内容。</p><p><strong>网络（Networking）</strong></p><p>实现HTTP和FTP等文件传输协议。</p><p><strong>JavaScript解释器（JavaScript Interpreter）</strong></p><p>解释并执行嵌入网页的JS代码（ECMAScript），并通过DOM接口和CSSOM接口来修改网页内容、样式规则，从而改变渲染结果。</p><p><strong>XML解析器（XML Parser）</strong></p><p>XML解析器可以将XML文档解析成文档对象模型（DOM）树。</p><p><strong>显示后端（Display Backend）</strong></p><p>提供绘图和窗口原语，包括用户界面控件集合、字体集合。</p><p><strong>数据持久层（Data Persistence）</strong></p><p>存储书签、工具栏设置、Cookie、安全证书等数据在硬盘上。</p><h1 id="三-工作原理"><a href="#三-工作原理" class="headerlink" title="三.工作原理"></a>三.工作原理</h1><p>浏览器工作流程图（Chrome浏览器为例）</p><p><img src="/2020/02/29/liu-lan-qi-de-gong-zuo-yuan-li/%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="浏览器工作流程图"></p><p>1.当你在浏览器地址栏输入内容时，浏览器进程中的UI线程会根据你输入的内容，判断你输入的内容是网址还是关键词，如果输入网址，则会启动网络线程进行网址访问相关操作，如果是一串关键词，则通过浏览器设置好的默认搜索引擎进行搜索。</p><p>2.浏览器进程中的网络线程请求获取到HTML数据后，通过IPC将数据传给渲染器进程的主线程，主线程将HTML解析构造DOM树；</p><p>3.进行样式计算；</p><p>4.根据DOM树和生成好的样式生成layout Tree，通过遍历Layout Tree生成绘制顺序表，然后遍历Layout Tree生成Layer Tree；</p><p>5.将Layer Tree和绘制顺序信息一起传给合成器线程；</p><p>6.合成器线程生成图块并传给栅格线程进行栅格化；</p><p>7.栅格化完成后，合成器线程会获得栅格化线程传来的“draw quads”图块信息，根据这些信息，合成器线程合成一个合成器帧；</p><p>8.通过IPC将生成的合成器帧传递给给浏览器进程，浏览器再传到GPU进行渲染，最后展示在屏幕上。</p><h1 id="四-附录"><a href="#四-附录" class="headerlink" title="四.附录"></a>四.附录</h1><h4 id="1-进程与线程"><a href="#1-进程与线程" class="headerlink" title="1.进程与线程"></a>1.进程与线程</h4><ul><li><strong>进程</strong>是操作系统进行资源分配和调度的基本单元，可以申请和拥有计算机资源，进程是程序的基本执行实体。<strong>线程</strong>是操作系统能够运算调度的最小单位，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</li></ul><img src="/2020/02/29/liu-lan-qi-de-gong-zuo-yuan-li/emm.jpg" alt="听不懂.jpg" style="zoom:75%;"><p>个人推荐看阮一峰大佬的博客：<a href="https://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="noopener">进程与线程的解释</a></p><h4 id="2-当前常见浏览器及其内核版本"><a href="#2-当前常见浏览器及其内核版本" class="headerlink" title="2.当前常见浏览器及其内核版本"></a>2.当前常见浏览器及其内核版本</h4><table><thead><tr><th align="center">浏览器名称</th><th align="center">内核版本</th></tr></thead><tbody><tr><td align="center">IE浏览器</td><td align="center">Trident内核（IE内核）</td></tr><tr><td align="center">Chrome浏览器</td><td align="center">Blink内核</td></tr><tr><td align="center">Firefox浏览器</td><td align="center">Gecko内核（Firefox内核）</td></tr><tr><td align="center">Safari浏览器</td><td align="center">Webkit内核</td></tr><tr><td align="center">Opera浏览器</td><td align="center">Blink内核</td></tr><tr><td align="center">360、猎豹、2345浏览器</td><td align="center">IE+Chrome双内核</td></tr><tr><td align="center">搜狗、QQ浏览器</td><td align="center">兼容模式下Trident+高速模式下Webkit</td></tr><tr><td align="center">百度浏览器</td><td align="center">Trident内核</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器原理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
